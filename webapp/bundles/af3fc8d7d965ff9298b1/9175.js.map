{"version":3,"file":"bundles/af3fc8d7d965ff9298b1/9175.js","mappings":"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","sources":["webpack://element-web/./src/components/views/dialogs/SendTokenDialog.tsx"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { useState, useCallback, type JSX } from \"react\";\r\n\r\nimport BaseDialog from \"./BaseDialog\";\r\nimport AccessibleButton from \"../elements/AccessibleButton\";\r\nimport Field from \"../elements/Field\";\r\nimport Spinner from \"../elements/Spinner\";\r\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\r\nimport { DAOMnemonicWallet } from \"../../../utils/DAOMnemonicWallet\";\r\nimport SpaceStore from \"../../../stores/spaces/SpaceStore\";\r\nimport Modal from \"../../../Modal\";\r\nimport InfoDialog from \"./InfoDialog\";\r\n\r\ninterface IProps {\r\n    daoId: string;\r\n    daoName: string;\r\n    senderAddress: string;\r\n    maxBalance: number;\r\n    currency: string;\r\n    onFinished(): void;\r\n}\r\n\r\nexport default function SendTokenDialog(props: IProps): JSX.Element {\r\n    const [recipientAddress, setRecipientAddress] = useState(\"\");\r\n    const [amount, setAmount] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    const wallet = DAOMnemonicWallet.getInstance();\r\n\r\n    const handleQRUpload = useCallback(() => {\r\n        const input = document.createElement('input');\r\n        input.type = 'file';\r\n        input.accept = 'image/*';\r\n        input.onchange = async (e) => {\r\n            const file = (e.target as HTMLInputElement).files?.[0];\r\n            if (!file) return;\r\n\r\n            try {\r\n                console.log(\"üì∑ QR Image uploaded, processing...\");\r\n                \r\n                // Create image element\r\n                const img = new Image();\r\n                const canvas = document.createElement('canvas');\r\n                const ctx = canvas.getContext('2d');\r\n                \r\n                img.onload = async () => {\r\n                    try {\r\n                        // Set canvas size to match image\r\n                        canvas.width = img.width;\r\n                        canvas.height = img.height;\r\n                        \r\n                        // Draw image on canvas\r\n                        ctx?.drawImage(img, 0, 0);\r\n                        \r\n                        // Get image data\r\n                        const imageData = ctx?.getImageData(0, 0, canvas.width, canvas.height);\r\n                        \r\n                        if (imageData) {\r\n                            try {\r\n                                // Try to use jsQR library if available\r\n                                const jsQR = await import('jsqr');\r\n                                const code = jsQR.default(imageData.data, imageData.width, imageData.height);\r\n                                \r\n                                if (code) {\r\n                                    console.log(\"‚úÖ QR Code decoded:\", code.data);\r\n                                    setRecipientAddress(code.data);\r\n                                    setError(null);\r\n                                } else {\r\n                                    console.warn(\"‚ùå No QR code found in image\");\r\n                                    setError(\"No QR code found in the uploaded image\");\r\n                                }\r\n                            } catch (importError) {\r\n                                console.warn(\"jsQR library not available, using fallback\");\r\n                                // Fallback: For demo purposes, just show that QR was uploaded\r\n                                setError(\"QR code processing requires additional library. Please manually enter the address.\");\r\n                                console.log(\"üì∑ QR image uploaded but automatic parsing not available\");\r\n                            }\r\n                        }\r\n                    } catch (decodeError) {\r\n                        console.error(\"Failed to decode QR code:\", decodeError);\r\n                        setError(\"Failed to decode QR code from image\");\r\n                    }\r\n                };\r\n                \r\n                // Load image from file\r\n                const reader = new FileReader();\r\n                reader.onload = (event) => {\r\n                    img.src = event.target?.result as string;\r\n                };\r\n                reader.readAsDataURL(file);\r\n                \r\n            } catch (err) {\r\n                console.error(\"Failed to process QR code:\", err);\r\n                setError(\"Failed to process uploaded image\");\r\n            }\r\n        };\r\n        input.click();\r\n    }, []);\r\n\r\n    const handleSend = useCallback(async () => {\r\n        if (!recipientAddress.trim()) {\r\n            setError(\"Please enter recipient address\");\r\n            return;\r\n        }\r\n\r\n        // Check if trying to send to self\r\n        if (recipientAddress.trim().toLowerCase() === props.senderAddress.toLowerCase()) {\r\n            setError(\"Cannot send tokens to your own address\");\r\n            return;\r\n        }\r\n\r\n        if (!amount.trim() || isNaN(Number(amount)) || Number(amount) <= 0) {\r\n            setError(\"Please enter valid amount\");\r\n            return;\r\n        }\r\n\r\n        if (Number(amount) > props.maxBalance) {\r\n            setError(`Amount cannot exceed ${props.maxBalance} ${props.currency}`);\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            await sendTransaction();\r\n            \r\n            Modal.createDialog(InfoDialog, {\r\n                title: \"Transaction Sent\",\r\n                description: `Successfully sent ${amount} ${props.currency} to ${recipientAddress}`,\r\n                button: \"OK\",\r\n                onFinished: () => {\r\n                    console.log(\"üîÑ OK button clicked - forcing wallet refresh\");\r\n                    // Force immediate wallet update\r\n                    const walletInstance = DAOMnemonicWallet.getInstance();\r\n                    walletInstance.notifyListeners();\r\n                    \r\n                    // Also force refresh from ledger\r\n                    setTimeout(async () => {\r\n                        try {\r\n                            console.log(`üîÑ Force refreshing balance from ledger for DAO: ${props.daoId}`);\r\n                            await walletInstance.refreshDAOWalletBalance(props.daoId);\r\n                            console.log(\"‚úÖ Balance refresh completed\");\r\n                        } catch (error) {\r\n                            console.warn(\"Failed to refresh balance:\", error);\r\n                        }\r\n                    }, 100);\r\n                }\r\n            });\r\n\r\n            props.onFinished();\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : \"Failed to send transaction\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [recipientAddress, amount, props]);\r\n\r\n    const sendTransaction = async (): Promise<void> => {\r\n        const client = MatrixClientPeg.safeGet();\r\n        const daoSpace = client.getRoom(props.daoId);\r\n        if (!daoSpace) {\r\n            throw new Error(\"DAO space not found\");\r\n        }\r\n\r\n        // Find ledger room\r\n        const children = SpaceStore.instance.getChildren(props.daoId);\r\n        const ledgerRoom = children.find(child => {\r\n            const room = client.getRoom(child.roomId);\r\n            return room && !room.isSpaceRoom() && room.name === \"ledger\";\r\n        });\r\n\r\n        if (!ledgerRoom) {\r\n            throw new Error(\"Ledger room not found\");\r\n        }\r\n\r\n        const room = client.getRoom(ledgerRoom.roomId);\r\n        if (!room) {\r\n            throw new Error(\"Failed to get ledger room\");\r\n        }\r\n\r\n        // Get sender wallet for signing\r\n        const senderWallet = wallet.getDAOWallet(props.daoId);\r\n        if (!senderWallet) {\r\n            throw new Error(\"Sender wallet not found\");\r\n        }\r\n\r\n        // Calculate new balances\r\n        const senderAmount = Number(amount);\r\n        const senderNewBalance = senderWallet.balance - senderAmount;\r\n        const recipientAddr = recipientAddress.trim();\r\n        \r\n        // Get recipient's current balance from ledger\r\n        const recipientCurrentBalance = await getRecipientCurrentBalance(room, recipientAddr);\r\n        const recipientNewBalance = recipientCurrentBalance + senderAmount;\r\n\r\n        const timestamp = new Date().toISOString();\r\n\r\n        // Create transaction data\r\n        const transactionData = {\r\n            type: \"PoC:transfer\",\r\n            from: props.senderAddress,\r\n            to: recipientAddr,\r\n            amount: senderAmount,\r\n            balance: senderNewBalance, // sender's new balance for compatibility\r\n            senderBalance: senderNewBalance,\r\n            recipientBalance: recipientNewBalance,\r\n            timestamp: timestamp,\r\n            verifier: client.getUserId()?.split(':')[0]?.substring(1) || \"unknown\",\r\n            verifierUserId: client.getUserId() || \"unknown\",\r\n            txHash: generateTxHash(),\r\n        };\r\n\r\n        // Sign the transaction\r\n        const signature = wallet.signData(props.daoId, JSON.stringify(transactionData));\r\n        if (!signature) {\r\n            throw new Error(\"Failed to sign transaction\");\r\n        }\r\n\r\n        // Send transaction to ledger room using the same format as DAOContributionTracker\r\n        await client.sendMessage(room.roomId, {\r\n            msgtype: \"m.text\",\r\n            body: `üè¶ TRANSACTION RECORD üè¶\\n${JSON.stringify(transactionData, null, 2)}`,\r\n            format: \"org.matrix.custom.html\",\r\n            formatted_body: `\r\n                <h3>üè¶ TRANSACTION RECORD üè¶</h3>\r\n                <table border=\"1\" style=\"border-collapse: collapse; width: 100%;\">\r\n                    <tr><td><b>Type</b></td><td>${transactionData.type}</td></tr>\r\n                    <tr><td><b>From</b></td><td>${transactionData.from}</td></tr>\r\n                    <tr><td><b>To</b></td><td>${transactionData.to}</td></tr>\r\n                    <tr><td><b>Amount</b></td><td>${transactionData.amount}B</td></tr>\r\n                    <tr><td><b>Sender Balance</b></td><td>${transactionData.senderBalance}B</td></tr>\r\n                    <tr><td><b>Recipient Balance</b></td><td>${transactionData.recipientBalance}B</td></tr>\r\n                    <tr><td><b>Verifier</b></td><td>${transactionData.verifier}</td></tr>\r\n                    <tr><td><b>Verifier ID</b></td><td><code>${transactionData.verifierUserId}</code></td></tr>\r\n                    <tr><td><b>Timestamp</b></td><td>${new Date(transactionData.timestamp).toISOString()}</td></tr>\r\n                    <tr><td><b>TX Hash</b></td><td><code>${transactionData.txHash}</code></td></tr>\r\n                    <tr><td><b>Digital Signature</b></td><td><code>${signature ? signature.substring(0, 32) + \"...\" : \"N/A\"}</code></td></tr>\r\n                    <tr><td><b>Signature Status</b></td><td>${signature ? \"‚úÖ Signed\" : \"‚ùå Unsigned\"}</td></tr>\r\n                </table>\r\n            `,\r\n            transaction_data: {\r\n                ...transactionData,\r\n                signature: signature,\r\n            }\r\n        });\r\n\r\n        // Update sender wallet balance\r\n        wallet.updateDAOWalletBalance(props.daoId, senderNewBalance);\r\n\r\n        console.log(`üí∏ Transaction sent: ${senderAmount}B from ${props.senderAddress} to ${recipientAddr}`);\r\n        console.log(`üí∞ New balances - Sender: ${senderNewBalance}B, Recipient: ${recipientNewBalance}B`);\r\n\r\n        // Force refresh balance from ledger after a short delay to ensure transaction is processed\r\n        setTimeout(async () => {\r\n            try {\r\n                console.log(`üîÑ Refreshing balance from ledger for ${props.senderAddress}`);\r\n                await wallet.refreshDAOWalletBalance(props.daoId);\r\n            } catch (error) {\r\n                console.warn(\"Failed to refresh balance from ledger:\", error);\r\n            }\r\n        }, 500);\r\n    };\r\n\r\n    const getRecipientCurrentBalance = async (ledgerRoom: any, recipientAddress: string): Promise<number> => {\r\n        try {\r\n            console.log(`üîç Getting current balance for recipient: ${recipientAddress}`);\r\n            \r\n            // Get timeline and events\r\n            const timeline = ledgerRoom.getLiveTimeline();\r\n            let allEvents = timeline.getEvents();\r\n            \r\n            // Load more events if needed\r\n            let loadAttempts = 0;\r\n            const maxAttempts = 10;\r\n            \r\n            while (loadAttempts < maxAttempts) {\r\n                try {\r\n                    const client = MatrixClientPeg.safeGet();\r\n                    const paginationToken = timeline.getPaginationToken(\"b\");\r\n                    if (!paginationToken) break;\r\n                    \r\n                    await client.paginateEventTimeline(timeline, { backwards: true, limit: 50 });\r\n                    const newEventCount = timeline.getEvents().length;\r\n                    if (newEventCount === allEvents.length) break;\r\n                    \r\n                    allEvents = timeline.getEvents();\r\n                    loadAttempts++;\r\n                } catch (paginationError) {\r\n                    console.warn(\"‚ö†Ô∏è Failed to load more events:\", paginationError);\r\n                    break;\r\n                }\r\n            }\r\n            \r\n            // Search for latest transaction involving recipient address\r\n            const eventsReversed = [...allEvents].reverse();\r\n            \r\n            for (const event of eventsReversed) {\r\n                if (event.getType() === \"m.room.message\") {\r\n                    const content = event.getContent();\r\n                    const transactionData = content.transaction_data;\r\n                    \r\n                    if (transactionData) {\r\n                        // Check if this transaction involves the recipient address\r\n                        if (transactionData.to === recipientAddress) {\r\n                            // Recipient received money - use recipientBalance if available, otherwise add amount to previous balance\r\n                            if (typeof transactionData.recipientBalance === 'number') {\r\n                                console.log(`üí∞ Found recipient balance: ${transactionData.recipientBalance}B`);\r\n                                return transactionData.recipientBalance;\r\n                            } else if (typeof transactionData.balance === 'number') {\r\n                                console.log(`üí∞ Found recipient balance (legacy): ${transactionData.balance}B`);\r\n                                return transactionData.balance;\r\n                            }\r\n                        } else if (transactionData.from === recipientAddress) {\r\n                            // Recipient sent money - use senderBalance if available, otherwise use balance\r\n                            if (typeof transactionData.senderBalance === 'number') {\r\n                                console.log(`üí∞ Found sender balance: ${transactionData.senderBalance}B`);\r\n                                return transactionData.senderBalance;\r\n                            } else if (typeof transactionData.balance === 'number') {\r\n                                console.log(`üí∞ Found sender balance (legacy): ${transactionData.balance}B`);\r\n                                return transactionData.balance;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            console.log(`üí∞ No transaction history found for ${recipientAddress}, starting with 0B`);\r\n            return 0;\r\n        } catch (error) {\r\n            console.error(\"Error getting recipient balance:\", error);\r\n            return 0;\r\n        }\r\n    };\r\n\r\n    const generateTxHash = (): string => {\r\n        return Math.random().toString(36).substring(2, 8);\r\n    };\r\n\r\n    return (\r\n        <BaseDialog\r\n            className=\"mx_SendTokenDialog\"\r\n            hasCancel={true}\r\n            onFinished={props.onFinished}\r\n            title={`Send Brotherhood - ${props.daoName} DAO`}\r\n            titleClass=\"mx_SendTokenDialog_title\"\r\n        >\r\n            <div className=\"mx_SendTokenDialog_content\">\r\n                <div className=\"mx_SendTokenDialog_form\">\r\n                    <div className=\"mx_SendTokenDialog_addressRow\">\r\n                        <Field\r\n                            label=\"Recipient Address\"\r\n                            placeholder=\"0x...\"\r\n                            value={recipientAddress}\r\n                            onChange={(e) => setRecipientAddress(e.target.value)}\r\n                            type=\"text\"\r\n                            className=\"mx_SendTokenDialog_addressField\"\r\n                        />\r\n                        <AccessibleButton\r\n                            kind=\"secondary\"\r\n                            onClick={handleQRUpload}\r\n                            className=\"mx_SendTokenDialog_qrButton\"\r\n                        >\r\n                            QR Upload\r\n                        </AccessibleButton>\r\n                    </div>\r\n\r\n                    <Field\r\n                        label={`Amount (Max: ${props.maxBalance} ${props.currency})`}\r\n                        placeholder=\"0\"\r\n                        value={amount}\r\n                        onChange={(e) => setAmount(e.target.value)}\r\n                        type=\"number\"\r\n                        step=\"1\"\r\n                        min=\"1\"\r\n                        max={props.maxBalance}\r\n                    />\r\n\r\n                    {error && (\r\n                        <div className=\"mx_SendTokenDialog_error\">\r\n                            {error}\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"mx_SendTokenDialog_actions\">\r\n                        <AccessibleButton\r\n                            kind=\"secondary\"\r\n                            onClick={props.onFinished}\r\n                            disabled={isLoading}\r\n                        >\r\n                            Cancel\r\n                        </AccessibleButton>\r\n                        <AccessibleButton\r\n                            kind=\"primary\"\r\n                            onClick={handleSend}\r\n                            disabled={isLoading || !recipientAddress.trim() || !amount.trim()}\r\n                        >\r\n                            {isLoading ? <Spinner w={16} h={16} /> : \"Send\"}\r\n                        </AccessibleButton>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </BaseDialog>\r\n    );\r\n}\r\n"],"names":["SendTokenDialog","props","recipientAddress","setRecipientAddress","useState","amount","setAmount","isLoading","setIsLoading","error","setError","wallet","DAOMnemonicWallet","getInstance","handleQRUpload","useCallback","input","document","createElement","type","accept","onchange","async","_files","file","e","target","files","console","log","img","Image","canvas","ctx","getContext","onload","width","height","drawImage","imageData","getImageData","code","default","data","warn","importError","decodeError","reader","FileReader","event","_event$target","src","result","readAsDataURL","err","click","handleSend","trim","toLowerCase","senderAddress","isNaN","Number","maxBalance","currency","sendTransaction","Modal","createDialog","InfoDialog","title","description","button","onFinished","walletInstance","notifyListeners","setTimeout","daoId","refreshDAOWalletBalance","Error","message","_client$getUserId","client","MatrixClientPeg","safeGet","getRoom","ledgerRoom","SpaceStore","instance","getChildren","find","child","room","roomId","isSpaceRoom","name","senderWallet","getDAOWallet","senderAmount","senderNewBalance","balance","recipientAddr","recipientNewBalance","getRecipientCurrentBalance","timestamp","Date","toISOString","transactionData","from","to","senderBalance","recipientBalance","verifier","getUserId","split","substring","verifierUserId","txHash","generateTxHash","signature","signData","JSON","stringify","sendMessage","msgtype","body","format","formatted_body","transaction_data","_objectSpread","updateDAOWalletBalance","timeline","getLiveTimeline","allEvents","getEvents","loadAttempts","maxAttempts","getPaginationToken","paginateEventTimeline","backwards","limit","length","paginationError","eventsReversed","reverse","getType","getContent","Math","random","toString","React","BaseDialog","className","hasCancel","daoName","titleClass","Field","label","placeholder","value","onChange","AccessibleButton","kind","onClick","step","min","max","disabled","Spinner","w","h"],"sourceRoot":""}