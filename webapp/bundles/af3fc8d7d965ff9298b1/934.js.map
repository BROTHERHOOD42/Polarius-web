{"version":3,"file":"bundles/af3fc8d7d965ff9298b1/934.js","mappings":"gYAqBe,SAASA,EAAaC,GA0FjC,OACIC,EAAAA,cAACC,EAAAA,EAAU,CACPC,UAAU,kBACVC,WAAW,EACXC,WAAYL,EAAMK,WAClBC,MAAM,oBACNC,WAAW,yBAEXN,EAAAA,cAAA,OAAKE,UAAU,2BACXF,EAAAA,cAAA,OAAKE,UAAU,+BACXF,EAAAA,cAACO,EAAAA,EAAM,CAACC,KAAMT,EAAMU,QAASP,UAAU,2BAEvBF,EAAAA,cAAA,OAAKE,UAAU,wBAC/BF,EAAAA,cAAA,KAAGE,UAAU,yBAAwB,mBACrCF,EAAAA,cAAA,KAAGE,UAAU,2BAA2BH,EAAMU,SAC9CT,EAAAA,cAAA,OAAKE,UAAU,2BACXF,EAAAA,cAACU,EAAAA,EAAgB,CACbC,KAAK,UACLC,QAAUC,IACNA,EAAEC,iBACFD,EAAEE,kBA5GJC,MACtBC,QAAQC,IAAI,kCACZ,IACIC,UAAUC,UAAUC,UAAUtB,EAAMU,SACpCQ,QAAQC,IAAI,iCAAkCnB,EAAMU,SAGpD,MAAMa,EAASC,SAASC,cAAc,+BACtC,GAAIF,EAAQ,CACR,MAAMG,EAAeH,EAAOI,YAC5BJ,EAAOI,YAAc,UACrBC,WAAW,KACPL,EAAOI,YAAcD,GACtB,IACP,CACJ,CAAE,MAAOG,GACLX,QAAQW,MAAM,4BAA6BA,EAC/C,GA4FwBZ,IAEJd,UAAU,8BAEb,gBAGDF,EAAAA,cAACU,EAAAA,EAAgB,CACbC,KAAK,YACLC,QAAUC,IACNA,EAAEC,iBACFD,EAAEE,kBApGJc,MACtBZ,QAAQC,IAAI,gCACZ,IAEI,MAAMY,EAAQP,SAASC,cAAc,+BAGrC,GAFAP,QAAQC,IAAI,2BAA4BY,IAEnCA,EAAO,CACRb,QAAQW,MAAM,6BAEd,MAAMG,EAAiBR,SAASC,cAAc,0BAG9C,GAFAP,QAAQC,IAAI,+BAAgCa,IAEvCA,EAED,YADAC,MAAM,8CAKV,MAAMC,EAAOV,SAASW,cAAc,KACpCD,EAAKE,SAAW,mBAChBF,EAAKG,KAAOL,EAAeM,IAE3Bd,SAASe,KAAKC,YAAYN,GAC1BA,EAAKO,QACLjB,SAASe,KAAKG,YAAYR,GAE1BhB,QAAQC,IAAI,sBAAsBe,EAAKE,iCAGvC,MAAMb,EAASC,SAASC,cAAc,+BACtC,GAAIF,EAAQ,CACR,MAAMG,EAAeH,EAAOI,YAC5BJ,EAAOI,YAAc,SACrBC,WAAW,KACPL,EAAOI,YAAcD,GACtB,IACP,CACA,MACJ,CAGA,MAAMQ,EAAOV,SAASW,cAAc,KACpCD,EAAKE,SAAW,mBAChBF,EAAKG,KAAON,EAAMO,IAGlBd,SAASe,KAAKC,YAAYN,GAC1BA,EAAKO,QACLjB,SAASe,KAAKG,YAAYR,GAE1BhB,QAAQC,IAAI,sBAAsBe,EAAKE,YAGvC,MAAMb,EAASC,SAASC,cAAc,+BACtC,GAAIF,EAAQ,CACR,MAAMG,EAAeH,EAAOI,YAC5BJ,EAAOI,YAAc,SACrBC,WAAW,KACPL,EAAOI,YAAcD,GACtB,IACP,CACJ,CAAE,MAAOG,GACLX,QAAQW,MAAM,4BAA6BA,GAC3CI,MAAM,4CACV,GAoCwBH,IAEJ3B,UAAU,8BAEb,kBASzB,C","sources":["webpack://element-web/./src/components/views/dialogs/QRCodeDialog.tsx"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX } from \"react\";\r\nimport { type Room } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport BaseDialog from \"./BaseDialog\";\r\nimport QRCode from \"../elements/QRCode\";\r\nimport AccessibleButton from \"../elements/AccessibleButton\";\r\n\r\ninterface IProps {\r\n    address: string;\r\n    daoName: string;\r\n    space: Room;\r\n    onFinished(): void;\r\n}\r\n\r\nexport default function QRCodeDialog(props: IProps): JSX.Element {\r\n\r\n    const handleCopyAddress = (): void => {\r\n        console.log(\"üìã Copy Address button clicked\");\r\n        try {\r\n            navigator.clipboard.writeText(props.address);\r\n            console.log(\"‚úÖ Address copied to clipboard:\", props.address);\r\n            \r\n            // Visual feedback\r\n            const button = document.querySelector('.mx_QRCodeDialog_copyButton') as HTMLElement;\r\n            if (button) {\r\n                const originalText = button.textContent;\r\n                button.textContent = \"Copied!\";\r\n                setTimeout(() => {\r\n                    button.textContent = originalText;\r\n                }, 1000);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"‚ùå Failed to copy address:\", error);\r\n        }\r\n    };\r\n\r\n    const handleSaveQRImage = (): void => {\r\n        console.log(\"üíæ Save Image button clicked\");\r\n        try {\r\n            // QRCode component uses img tag, not canvas - look for the img element\r\n            const qrImg = document.querySelector('.mx_QRCodeDialog_qrCode img') as HTMLImageElement;\r\n            console.log(\"üîç Looking for QR image:\", qrImg);\r\n            \r\n            if (!qrImg) {\r\n                console.error(\"‚ùå QR code image not found\");\r\n                // Try alternative selectors\r\n                const alternativeImg = document.querySelector('.mx_VerificationQRCode') as HTMLImageElement;\r\n                console.log(\"üîç Alternative image search:\", alternativeImg);\r\n                \r\n                if (!alternativeImg) {\r\n                    alert(\"QR code image not found. Please try again.\");\r\n                    return;\r\n                }\r\n                \r\n                // Use alternative image\r\n                const link = document.createElement('a');\r\n                link.download = 'MY-Wallet-QR.png';\r\n                link.href = alternativeImg.src;\r\n                \r\n                document.body.appendChild(link);\r\n                link.click();\r\n                document.body.removeChild(link);\r\n                \r\n                console.log(`‚úÖ QR code saved as ${link.download} (alternative method)`);\r\n                \r\n                // Visual feedback\r\n                const button = document.querySelector('.mx_QRCodeDialog_saveButton') as HTMLElement;\r\n                if (button) {\r\n                    const originalText = button.textContent;\r\n                    button.textContent = \"Saved!\";\r\n                    setTimeout(() => {\r\n                        button.textContent = originalText;\r\n                    }, 1000);\r\n                }\r\n                return;\r\n            }\r\n\r\n            // Create download link using the img src (which is already a data URL)\r\n            const link = document.createElement('a');\r\n            link.download = 'MY-Wallet-QR.png';\r\n            link.href = qrImg.src;\r\n            \r\n            // Trigger download\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            document.body.removeChild(link);\r\n            \r\n            console.log(`‚úÖ QR code saved as ${link.download}`);\r\n            \r\n            // Visual feedback\r\n            const button = document.querySelector('.mx_QRCodeDialog_saveButton') as HTMLElement;\r\n            if (button) {\r\n                const originalText = button.textContent;\r\n                button.textContent = \"Saved!\";\r\n                setTimeout(() => {\r\n                    button.textContent = originalText;\r\n                }, 1000);\r\n            }\r\n        } catch (error) {\r\n            console.error(\"‚ùå Failed to save QR code:\", error);\r\n            alert(\"Failed to save QR code. Please try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <BaseDialog\r\n            className=\"mx_QRCodeDialog\"\r\n            hasCancel={true}\r\n            onFinished={props.onFinished}\r\n            title=\"MY Wallet QR Code\"\r\n            titleClass=\"mx_QRCodeDialog_title\"\r\n        >\r\n            <div className=\"mx_QRCodeDialog_content\">\r\n                <div className=\"mx_QRCodeDialog_qrContainer\">\r\n                    <QRCode data={props.address} className=\"mx_QRCodeDialog_qrCode\" />\r\n                    \r\n                                    <div className=\"mx_QRCodeDialog_info\">\r\n                    <p className=\"mx_QRCodeDialog_label\">Wallet Address:</p>\r\n                    <p className=\"mx_QRCodeDialog_address\">{props.address}</p>\r\n                    <div className=\"mx_QRCodeDialog_actions\">\r\n                        <AccessibleButton \r\n                            kind=\"primary\"\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                                handleCopyAddress();\r\n                            }}\r\n                            className=\"mx_QRCodeDialog_copyButton\"\r\n                            data-testid=\"copy-address-button\"\r\n                        >\r\n                            Copy Address\r\n                        </AccessibleButton>\r\n                        <AccessibleButton \r\n                            kind=\"secondary\"\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                e.stopPropagation();\r\n                                handleSaveQRImage();\r\n                            }}\r\n                            className=\"mx_QRCodeDialog_saveButton\"\r\n                            data-testid=\"save-image-button\"\r\n                        >\r\n                            Save Image\r\n                        </AccessibleButton>\r\n                    </div>\r\n                </div>\r\n                </div>\r\n            </div>\r\n        </BaseDialog>\r\n    );\r\n}\r\n"],"names":["QRCodeDialog","props","React","BaseDialog","className","hasCancel","onFinished","title","titleClass","QRCode","data","address","AccessibleButton","kind","onClick","e","preventDefault","stopPropagation","handleCopyAddress","console","log","navigator","clipboard","writeText","button","document","querySelector","originalText","textContent","setTimeout","error","handleSaveQRImage","qrImg","alternativeImg","alert","link","createElement","download","href","src","body","appendChild","click","removeChild"],"sourceRoot":""}