{"version":3,"file":"bundles/352b00c5a33c88ed2a7a/1127.js","mappings":"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","sources":["webpack://element-web/./node_modules/file-saver/src/FileSaver.js","webpack://element-web/./src/async-components/views/dialogs/security/CreateSecretStorageDialog.tsx","webpack://element-web/./src/components/views/auth/PassphraseConfirmField.tsx","webpack://element-web/./src/components/views/auth/PassphraseField.tsx"],"sourcesContent":["/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nvar isMacOSWebView = _global.navigator && /Macintosh/.test(navigator.userAgent) && /AppleWebKit/.test(navigator.userAgent) && !/Safari/.test(navigator.userAgent)\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView\n  : ('download' in HTMLAnchorElement.prototype && !isMacOSWebView)\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) && typeof FileReader !== 'undefined') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2019, 2020 , 2023 The Matrix.org Foundation C.I.C.\r\nCopyright 2018, 2019 New Vector Ltd\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX, createRef } from \"react\";\r\nimport FileSaver from \"file-saver\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\nimport { type AuthDict } from \"matrix-js-sdk/src/matrix\";\r\nimport { type GeneratedSecretStorageKey } from \"matrix-js-sdk/src/crypto-api\";\r\nimport classNames from \"classnames\";\r\nimport CheckmarkIcon from \"@vector-im/compound-design-tokens/assets/web/icons/check\";\r\n\r\nimport { MatrixClientPeg } from \"../../../../MatrixClientPeg\";\r\nimport { _t, _td } from \"../../../../languageHandler\";\r\nimport Modal from \"../../../../Modal\";\r\nimport { copyNode } from \"../../../../utils/strings\";\r\nimport { SSOAuthEntry } from \"../../../../components/views/auth/InteractiveAuthEntryComponents\";\r\nimport PassphraseField from \"../../../../components/views/auth/PassphraseField\";\r\nimport StyledRadioButton from \"../../../../components/views/elements/StyledRadioButton\";\r\nimport AccessibleButton from \"../../../../components/views/elements/AccessibleButton\";\r\nimport DialogButtons from \"../../../../components/views/elements/DialogButtons\";\r\nimport InlineSpinner from \"../../../../components/views/elements/InlineSpinner\";\r\nimport {\r\n    getSecureBackupSetupMethods,\r\n    isSecureBackupRequired,\r\n    SecureBackupSetupMethod,\r\n} from \"../../../../utils/WellKnownUtils\";\r\nimport { ModuleRunner } from \"../../../../modules/ModuleRunner\";\r\nimport type Field from \"../../../../components/views/elements/Field\";\r\nimport BaseDialog from \"../../../../components/views/dialogs/BaseDialog\";\r\nimport Spinner from \"../../../../components/views/elements/Spinner\";\r\nimport InteractiveAuthDialog from \"../../../../components/views/dialogs/InteractiveAuthDialog\";\r\nimport { type IValidationResult } from \"../../../../components/views/elements/Validation\";\r\nimport PassphraseConfirmField from \"../../../../components/views/auth/PassphraseConfirmField\";\r\nimport { initialiseDehydrationIfEnabled } from \"../../../../utils/device/dehydration\";\r\n\r\n// I made a mistake while converting this and it has to be fixed!\r\nenum Phase {\r\n    Loading = \"loading\",\r\n    LoadError = \"load_error\",\r\n    ChooseKeyPassphrase = \"choose_key_passphrase\",\r\n    Passphrase = \"passphrase\",\r\n    PassphraseConfirm = \"passphrase_confirm\",\r\n    ShowKey = \"show_key\",\r\n    Storing = \"storing\",\r\n    Stored = \"stored\",\r\n    ConfirmSkip = \"confirm_skip\",\r\n}\r\n\r\nconst PASSWORD_MIN_SCORE = 4; // So secure, many characters, much complex, wow, etc, etc.\r\n\r\ninterface IProps {\r\n    forceReset?: boolean;\r\n    onFinished(ok?: boolean): void;\r\n}\r\n\r\ninterface IState {\r\n    phase: Phase;\r\n    passPhrase: string;\r\n    passPhraseValid: boolean;\r\n    passPhraseConfirm: string;\r\n    copied: boolean;\r\n    downloaded: boolean;\r\n    setPassphrase: boolean;\r\n\r\n    canSkip: boolean;\r\n    passPhraseKeySelected: string;\r\n    error?: boolean;\r\n}\r\n\r\n/**\r\n * Walks the user through the process of creating a 4S passphrase and bootstrapping secret storage.\r\n *\r\n * If the user already has a key backup, follows a \"migration\" flow (aka \"Upgrade your encryption\") which\r\n * prompts the user to enter their backup decryption password (a Curve25519 private key, possibly derived\r\n * from a passphrase), and uses that as the (AES) 4S encryption key.\r\n *\r\n * @deprecated send the user to EncryptionUserSettingsTab instead\r\n */\r\nexport default class CreateSecretStorageDialog extends React.PureComponent<IProps, IState> {\r\n    public static defaultProps: Partial<IProps> = {\r\n        forceReset: false,\r\n    };\r\n    private recoveryKey?: GeneratedSecretStorageKey;\r\n    private recoveryKeyNode = createRef<HTMLElement>();\r\n    private passphraseField = createRef<Field>();\r\n\r\n    public constructor(props: IProps) {\r\n        super(props);\r\n\r\n        const cli = MatrixClientPeg.safeGet();\r\n\r\n        let passPhraseKeySelected: SecureBackupSetupMethod;\r\n        const setupMethods = getSecureBackupSetupMethods(cli);\r\n        if (setupMethods.includes(SecureBackupSetupMethod.Key)) {\r\n            passPhraseKeySelected = SecureBackupSetupMethod.Key;\r\n        } else {\r\n            passPhraseKeySelected = SecureBackupSetupMethod.Passphrase;\r\n        }\r\n\r\n        const keyFromCustomisations = ModuleRunner.instance.extensions.cryptoSetup.createSecretStorageKey();\r\n        const phase = keyFromCustomisations ? Phase.Loading : Phase.ChooseKeyPassphrase;\r\n\r\n        this.state = {\r\n            phase,\r\n            passPhrase: \"\",\r\n            passPhraseValid: false,\r\n            passPhraseConfirm: \"\",\r\n            copied: false,\r\n            downloaded: false,\r\n            setPassphrase: false,\r\n            canSkip: !isSecureBackupRequired(cli),\r\n            passPhraseKeySelected,\r\n        };\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        const keyFromCustomisations = ModuleRunner.instance.extensions.cryptoSetup.createSecretStorageKey();\r\n        if (keyFromCustomisations) this.initExtension(keyFromCustomisations);\r\n    }\r\n\r\n    private initExtension(keyFromCustomisations: Uint8Array): void {\r\n        logger.log(\"CryptoSetupExtension: Created key via extension, jumping to bootstrap step\");\r\n        this.recoveryKey = {\r\n            privateKey: keyFromCustomisations,\r\n        };\r\n        this.bootstrapSecretStorage();\r\n    }\r\n\r\n    private onKeyPassphraseChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({\r\n            passPhraseKeySelected: e.target.value,\r\n        });\r\n    };\r\n\r\n    private onChooseKeyPassphraseFormSubmit = async (): Promise<void> => {\r\n        if (this.state.passPhraseKeySelected === SecureBackupSetupMethod.Key) {\r\n            this.recoveryKey = await MatrixClientPeg.safeGet().getCrypto()!.createRecoveryKeyFromPassphrase();\r\n            this.setState({\r\n                copied: false,\r\n                downloaded: false,\r\n                setPassphrase: false,\r\n                phase: Phase.ShowKey,\r\n            });\r\n        } else {\r\n            this.setState({\r\n                copied: false,\r\n                downloaded: false,\r\n                phase: Phase.Passphrase,\r\n            });\r\n        }\r\n    };\r\n\r\n    private onCopyClick = (): void => {\r\n        const successful = copyNode(this.recoveryKeyNode.current);\r\n        if (successful) {\r\n            this.setState({\r\n                copied: true,\r\n            });\r\n        }\r\n    };\r\n\r\n    private onDownloadClick = (): void => {\r\n        if (!this.recoveryKey) return;\r\n        const blob = new Blob([this.recoveryKey.encodedPrivateKey!], {\r\n            type: \"text/plain;charset=us-ascii\",\r\n        });\r\n        FileSaver.saveAs(blob, \"security-key.txt\");\r\n\r\n        this.setState({\r\n            downloaded: true,\r\n        });\r\n    };\r\n\r\n    private doBootstrapUIAuth = async (makeRequest: (authData: AuthDict) => Promise<void>): Promise<void> => {\r\n        const dialogAesthetics = {\r\n            [SSOAuthEntry.PHASE_PREAUTH]: {\r\n                title: _t(\"auth|uia|sso_title\"),\r\n                body: _t(\"auth|uia|sso_preauth_body\"),\r\n                continueText: _t(\"auth|sso\"),\r\n                continueKind: \"primary\",\r\n            },\r\n            [SSOAuthEntry.PHASE_POSTAUTH]: {\r\n                title: _t(\"encryption|confirm_encryption_setup_title\"),\r\n                body: _t(\"encryption|confirm_encryption_setup_body\"),\r\n                continueText: _t(\"action|confirm\"),\r\n                continueKind: \"primary\",\r\n            },\r\n        };\r\n\r\n        const { finished } = Modal.createDialog(InteractiveAuthDialog, {\r\n            title: _t(\"encryption|bootstrap_title\"),\r\n            matrixClient: MatrixClientPeg.safeGet(),\r\n            makeRequest,\r\n            aestheticsForStagePhases: {\r\n                [SSOAuthEntry.LOGIN_TYPE]: dialogAesthetics,\r\n                [SSOAuthEntry.UNSTABLE_LOGIN_TYPE]: dialogAesthetics,\r\n            },\r\n        });\r\n        const [confirmed] = await finished;\r\n        if (!confirmed) {\r\n            throw new Error(\"Cross-signing key upload auth canceled\");\r\n        }\r\n    };\r\n\r\n    private bootstrapSecretStorage = async (): Promise<void> => {\r\n        const cli = MatrixClientPeg.safeGet();\r\n        const crypto = cli.getCrypto()!;\r\n        const { forceReset } = this.props;\r\n\r\n        let backupInfo;\r\n        // First, unless we know we want to do a reset, we see if there is an existing key backup\r\n        if (!forceReset) {\r\n            try {\r\n                this.setState({ phase: Phase.Loading });\r\n                backupInfo = await crypto.getKeyBackupInfo();\r\n            } catch (e) {\r\n                logger.error(\"Error fetching backup data from server\", e);\r\n                this.setState({ phase: Phase.LoadError });\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            phase: Phase.Storing,\r\n            error: undefined,\r\n        });\r\n\r\n        try {\r\n            if (forceReset) {\r\n                /* Resetting cross-signing requires secret storage to be reset\r\n                 * (otherwise it will try to store the cross-signing keys in the\r\n                 * old secret storage, and may prompt for the old key, which is\r\n                 * probably not available), and resetting key backup requires\r\n                 * cross-signing to be reset (so that the new backup can be\r\n                 * signed by the new cross-signing key).  So we reset secret\r\n                 * storage first, then cross-signing, then key backup.\r\n                 */\r\n                logger.log(\"Forcing secret storage reset\");\r\n                await crypto.bootstrapSecretStorage({\r\n                    createSecretStorageKey: async () => this.recoveryKey!,\r\n                    setupNewSecretStorage: true,\r\n                });\r\n                logger.log(\"Resetting key backup\");\r\n                await crypto.resetKeyBackup();\r\n            } else {\r\n                // For password authentication users after 2020-09, this cross-signing\r\n                // step will be a no-op since it is now setup during registration or login\r\n                // when needed. We should keep this here to cover other cases such as:\r\n                //   * Users with existing sessions prior to 2020-09 changes\r\n                //   * SSO authentication users which require interactive auth to upload\r\n                //     keys (and also happen to skip all post-authentication flows at the\r\n                //     moment via token login)\r\n                await crypto.bootstrapCrossSigning({\r\n                    authUploadDeviceSigningKeys: this.doBootstrapUIAuth,\r\n                });\r\n                await crypto.bootstrapSecretStorage({\r\n                    createSecretStorageKey: async () => this.recoveryKey!,\r\n                    setupNewKeyBackup: !backupInfo,\r\n                });\r\n            }\r\n            await initialiseDehydrationIfEnabled(cli, { createNewKey: true });\r\n\r\n            this.setState({\r\n                phase: Phase.Stored,\r\n            });\r\n        } catch (e) {\r\n            this.setState({ error: true });\r\n            logger.error(\"Error bootstrapping secret storage\", e);\r\n        }\r\n    };\r\n\r\n    private onCancel = (): void => {\r\n        this.props.onFinished(false);\r\n    };\r\n\r\n    private onLoadRetryClick = (): void => {\r\n        this.bootstrapSecretStorage();\r\n    };\r\n\r\n    private onShowKeyContinueClick = (): void => {\r\n        this.bootstrapSecretStorage();\r\n    };\r\n\r\n    private onCancelClick = (): void => {\r\n        this.setState({ phase: Phase.ConfirmSkip });\r\n    };\r\n\r\n    private onGoBackClick = (): void => {\r\n        this.setState({ phase: Phase.ChooseKeyPassphrase });\r\n    };\r\n\r\n    private onPassPhraseNextClick = async (e: React.FormEvent): Promise<void> => {\r\n        e.preventDefault();\r\n        if (!this.passphraseField.current) return; // unmounting\r\n\r\n        await this.passphraseField.current.validate({ allowEmpty: false });\r\n        if (!this.passphraseField.current.state.valid) {\r\n            this.passphraseField.current.focus();\r\n            this.passphraseField.current.validate({ allowEmpty: false, focused: true });\r\n            return;\r\n        }\r\n\r\n        this.setState({ phase: Phase.PassphraseConfirm });\r\n    };\r\n\r\n    private onPassPhraseConfirmNextClick = async (e: React.FormEvent): Promise<void> => {\r\n        e.preventDefault();\r\n\r\n        if (this.state.passPhrase !== this.state.passPhraseConfirm) return;\r\n\r\n        this.recoveryKey = await MatrixClientPeg.safeGet()\r\n            .getCrypto()!\r\n            .createRecoveryKeyFromPassphrase(this.state.passPhrase);\r\n        this.setState({\r\n            copied: false,\r\n            downloaded: false,\r\n            setPassphrase: true,\r\n            phase: Phase.ShowKey,\r\n        });\r\n    };\r\n\r\n    private onSetAgainClick = (): void => {\r\n        this.setState({\r\n            passPhrase: \"\",\r\n            passPhraseValid: false,\r\n            passPhraseConfirm: \"\",\r\n            phase: Phase.Passphrase,\r\n        });\r\n    };\r\n\r\n    private onPassPhraseValidate = (result: IValidationResult): void => {\r\n        this.setState({\r\n            passPhraseValid: !!result.valid,\r\n        });\r\n    };\r\n\r\n    private onPassPhraseChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({\r\n            passPhrase: e.target.value,\r\n        });\r\n    };\r\n\r\n    private onPassPhraseConfirmChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({\r\n            passPhraseConfirm: e.target.value,\r\n        });\r\n    };\r\n\r\n    private renderOptionKey(): JSX.Element {\r\n        return (\r\n            <StyledRadioButton\r\n                key={SecureBackupSetupMethod.Key}\r\n                value={SecureBackupSetupMethod.Key}\r\n                name=\"keyPassphrase\"\r\n                checked={this.state.passPhraseKeySelected === SecureBackupSetupMethod.Key}\r\n                onChange={this.onKeyPassphraseChange}\r\n                outlined\r\n            >\r\n                <div className=\"mx_CreateSecretStorageDialog_optionTitle\">\r\n                    <span className=\"mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_secureBackup\" />\r\n                    {_t(\"settings|key_backup|setup_secure_backup|generate_security_key_title\")}\r\n                </div>\r\n                <div>{_t(\"settings|key_backup|setup_secure_backup|generate_security_key_description\")}</div>\r\n            </StyledRadioButton>\r\n        );\r\n    }\r\n\r\n    private renderOptionPassphrase(): JSX.Element {\r\n        return (\r\n            <StyledRadioButton\r\n                key={SecureBackupSetupMethod.Passphrase}\r\n                value={SecureBackupSetupMethod.Passphrase}\r\n                name=\"keyPassphrase\"\r\n                checked={this.state.passPhraseKeySelected === SecureBackupSetupMethod.Passphrase}\r\n                onChange={this.onKeyPassphraseChange}\r\n                outlined\r\n            >\r\n                <div className=\"mx_CreateSecretStorageDialog_optionTitle\">\r\n                    <span className=\"mx_CreateSecretStorageDialog_optionIcon mx_CreateSecretStorageDialog_optionIcon_securePhrase\" />\r\n                    {_t(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\r\n                </div>\r\n                <div>{_t(\"settings|key_backup|setup_secure_backup|use_phrase_only_you_know\")}</div>\r\n            </StyledRadioButton>\r\n        );\r\n    }\r\n\r\n    private renderPhaseChooseKeyPassphrase(): JSX.Element {\r\n        const setupMethods = getSecureBackupSetupMethods(MatrixClientPeg.safeGet());\r\n        const optionKey = setupMethods.includes(SecureBackupSetupMethod.Key) ? this.renderOptionKey() : null;\r\n        const optionPassphrase = setupMethods.includes(SecureBackupSetupMethod.Passphrase)\r\n            ? this.renderOptionPassphrase()\r\n            : null;\r\n\r\n        return (\r\n            <form onSubmit={this.onChooseKeyPassphraseFormSubmit}>\r\n                <p className=\"mx_CreateSecretStorageDialog_centeredBody\">\r\n                    {_t(\"settings|key_backup|setup_secure_backup|description\")}\r\n                </p>\r\n                <div className=\"mx_CreateSecretStorageDialog_primaryContainer\" role=\"radiogroup\">\r\n                    {optionKey}\r\n                    {optionPassphrase}\r\n                </div>\r\n                <DialogButtons\r\n                    primaryButton={_t(\"action|continue\")}\r\n                    onPrimaryButtonClick={this.onChooseKeyPassphraseFormSubmit}\r\n                    onCancel={this.onCancelClick}\r\n                    hasCancel={this.state.canSkip}\r\n                />\r\n            </form>\r\n        );\r\n    }\r\n\r\n    private renderPhasePassPhrase(): JSX.Element {\r\n        return (\r\n            <form onSubmit={this.onPassPhraseNextClick}>\r\n                <p>{_t(\"settings|key_backup|setup_secure_backup|enter_phrase_description\")}</p>\r\n\r\n                <div className=\"mx_CreateSecretStorageDialog_passPhraseContainer\">\r\n                    <PassphraseField\r\n                        id=\"mx_passPhraseInput\"\r\n                        className=\"mx_CreateSecretStorageDialog_passPhraseField\"\r\n                        onChange={this.onPassPhraseChange}\r\n                        minScore={PASSWORD_MIN_SCORE}\r\n                        value={this.state.passPhrase}\r\n                        onValidate={this.onPassPhraseValidate}\r\n                        fieldRef={this.passphraseField}\r\n                        autoFocus={true}\r\n                        label={_td(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\r\n                        labelEnterPassword={_td(\"settings|key_backup|setup_secure_backup|enter_phrase_title\")}\r\n                        labelStrongPassword={_td(\"settings|key_backup|setup_secure_backup|phrase_strong_enough\")}\r\n                        labelAllowedButUnsafe={_td(\"settings|key_backup|setup_secure_backup|phrase_strong_enough\")}\r\n                    />\r\n                </div>\r\n\r\n                <DialogButtons\r\n                    primaryButton={_t(\"action|continue\")}\r\n                    onPrimaryButtonClick={this.onPassPhraseNextClick}\r\n                    hasCancel={false}\r\n                    disabled={!this.state.passPhraseValid}\r\n                >\r\n                    <button type=\"button\" onClick={this.onCancelClick} className=\"danger\">\r\n                        {_t(\"action|cancel\")}\r\n                    </button>\r\n                </DialogButtons>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    private renderPhasePassPhraseConfirm(): JSX.Element {\r\n        let matchText;\r\n        let changeText;\r\n        if (this.state.passPhraseConfirm === this.state.passPhrase) {\r\n            matchText = _t(\"settings|key_backup|setup_secure_backup|pass_phrase_match_success\");\r\n            changeText = _t(\"settings|key_backup|setup_secure_backup|use_different_passphrase\");\r\n        } else if (!this.state.passPhrase.startsWith(this.state.passPhraseConfirm)) {\r\n            // only tell them they're wrong if they've actually gone wrong.\r\n            // Security conscious readers will note that if you left element-web unattended\r\n            // on this screen, this would make it easy for a malicious person to guess\r\n            // your passphrase one letter at a time, but they could get this faster by\r\n            // just opening the browser's developer tools and reading it.\r\n            // Note that not having typed anything at all will not hit this clause and\r\n            // fall through so empty box === no hint.\r\n            matchText = _t(\"settings|key_backup|setup_secure_backup|pass_phrase_match_failed\");\r\n            changeText = _t(\"settings|key_backup|setup_secure_backup|set_phrase_again\");\r\n        }\r\n\r\n        let passPhraseMatch: JSX.Element | undefined;\r\n        if (matchText) {\r\n            passPhraseMatch = (\r\n                <div>\r\n                    <div>{matchText}</div>\r\n                    <AccessibleButton kind=\"link\" onClick={this.onSetAgainClick}>\r\n                        {changeText}\r\n                    </AccessibleButton>\r\n                </div>\r\n            );\r\n        }\r\n        return (\r\n            <form onSubmit={this.onPassPhraseConfirmNextClick}>\r\n                <p>{_t(\"settings|key_backup|setup_secure_backup|enter_phrase_to_confirm\")}</p>\r\n                <div className=\"mx_CreateSecretStorageDialog_passPhraseContainer\">\r\n                    <PassphraseConfirmField\r\n                        id=\"mx_passPhraseInput\"\r\n                        onChange={this.onPassPhraseConfirmChange}\r\n                        value={this.state.passPhraseConfirm}\r\n                        className=\"mx_CreateSecretStorageDialog_passPhraseField\"\r\n                        label={_td(\"settings|key_backup|setup_secure_backup|confirm_security_phrase\")}\r\n                        labelRequired={_td(\"settings|key_backup|setup_secure_backup|confirm_security_phrase\")}\r\n                        labelInvalid={_td(\"settings|key_backup|setup_secure_backup|pass_phrase_match_failed\")}\r\n                        autoFocus={true}\r\n                        password={this.state.passPhrase}\r\n                    />\r\n                    <div className=\"mx_CreateSecretStorageDialog_passPhraseMatch\">{passPhraseMatch}</div>\r\n                </div>\r\n                <DialogButtons\r\n                    primaryButton={_t(\"action|continue\")}\r\n                    onPrimaryButtonClick={this.onPassPhraseConfirmNextClick}\r\n                    hasCancel={false}\r\n                    disabled={this.state.passPhrase !== this.state.passPhraseConfirm}\r\n                >\r\n                    <button type=\"button\" onClick={this.onCancelClick} className=\"danger\">\r\n                        {_t(\"action|skip\")}\r\n                    </button>\r\n                </DialogButtons>\r\n            </form>\r\n        );\r\n    }\r\n\r\n    private renderPhaseShowKey(): JSX.Element {\r\n        let continueButton: JSX.Element;\r\n        if (this.state.phase === Phase.ShowKey) {\r\n            continueButton = (\r\n                <DialogButtons\r\n                    primaryButton={_t(\"action|continue\")}\r\n                    disabled={!this.state.downloaded && !this.state.copied && !this.state.setPassphrase}\r\n                    onPrimaryButtonClick={this.onShowKeyContinueClick}\r\n                    hasCancel={false}\r\n                />\r\n            );\r\n        } else {\r\n            continueButton = (\r\n                <div className=\"mx_CreateSecretStorageDialog_continueSpinner\">\r\n                    <InlineSpinner />\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <p>{_t(\"settings|key_backup|setup_secure_backup|security_key_safety_reminder\")}</p>\r\n                <div className=\"mx_CreateSecretStorageDialog_primaryContainer mx_CreateSecretStorageDialog_recoveryKeyPrimarycontainer\">\r\n                    <div className=\"mx_CreateSecretStorageDialog_recoveryKeyContainer\">\r\n                        <div className=\"mx_CreateSecretStorageDialog_recoveryKey\">\r\n                            <code ref={this.recoveryKeyNode}>{this.recoveryKey?.encodedPrivateKey}</code>\r\n                        </div>\r\n                        <div className=\"mx_CreateSecretStorageDialog_recoveryKeyButtons\">\r\n                            <AccessibleButton\r\n                                kind=\"primary\"\r\n                                className=\"mx_Dialog_primary\"\r\n                                onClick={this.onDownloadClick}\r\n                                disabled={this.state.phase === Phase.Storing}\r\n                            >\r\n                                {_t(\"action|download\")}\r\n                            </AccessibleButton>\r\n                            <span>\r\n                                {_t(\"settings|key_backup|setup_secure_backup|download_or_copy\", {\r\n                                    downloadButton: \"\",\r\n                                    copyButton: \"\",\r\n                                })}\r\n                            </span>\r\n                            <AccessibleButton\r\n                                kind=\"primary\"\r\n                                className=\"mx_Dialog_primary mx_CreateSecretStorageDialog_recoveryKeyButtons_copyBtn\"\r\n                                onClick={this.onCopyClick}\r\n                                disabled={this.state.phase === Phase.Storing}\r\n                            >\r\n                                {this.state.copied ? _t(\"common|copied\") : _t(\"action|copy\")}\r\n                            </AccessibleButton>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {continueButton}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderBusyPhase(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <Spinner />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderStoredPhase(): JSX.Element {\r\n        return (\r\n            <>\r\n                <p className=\"mx_Dialog_content\">\r\n                    {_t(\"settings|key_backup|setup_secure_backup|backup_setup_success_description\")}\r\n                </p>\r\n                <DialogButtons\r\n                    primaryButton={_t(\"action|done\")}\r\n                    onPrimaryButtonClick={() => this.props.onFinished(true)}\r\n                    hasCancel={false}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n\r\n    private renderPhaseLoadError(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <p>{_t(\"settings|key_backup|setup_secure_backup|secret_storage_query_failure\")}</p>\r\n                <div className=\"mx_Dialog_buttons\">\r\n                    <DialogButtons\r\n                        primaryButton={_t(\"action|retry\")}\r\n                        onPrimaryButtonClick={this.onLoadRetryClick}\r\n                        hasCancel={this.state.canSkip}\r\n                        onCancel={this.onCancel}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderPhaseSkipConfirm(): JSX.Element {\r\n        return (\r\n            <div>\r\n                <p>{_t(\"settings|key_backup|setup_secure_backup|cancel_warning\")}</p>\r\n                <p>{_t(\"settings|key_backup|setup_secure_backup|settings_reminder\")}</p>\r\n                <DialogButtons\r\n                    primaryButton={_t(\"action|go_back\")}\r\n                    onPrimaryButtonClick={this.onGoBackClick}\r\n                    hasCancel={false}\r\n                >\r\n                    <button type=\"button\" className=\"danger\" onClick={this.onCancel}>\r\n                        {_t(\"action|cancel\")}\r\n                    </button>\r\n                </DialogButtons>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private titleForPhase(phase: Phase): string {\r\n        switch (phase) {\r\n            case Phase.ChooseKeyPassphrase:\r\n                return _t(\"encryption|set_up_toast_title\");\r\n            case Phase.Passphrase:\r\n                return _t(\"settings|key_backup|setup_secure_backup|title_set_phrase\");\r\n            case Phase.PassphraseConfirm:\r\n                return _t(\"settings|key_backup|setup_secure_backup|title_confirm_phrase\");\r\n            case Phase.ConfirmSkip:\r\n                return _t(\"common|are_you_sure\");\r\n            case Phase.ShowKey:\r\n                return _t(\"settings|key_backup|setup_secure_backup|title_save_key\");\r\n            case Phase.Storing:\r\n                return _t(\"encryption|bootstrap_title\");\r\n            case Phase.Stored:\r\n                return _t(\"settings|key_backup|setup_secure_backup|backup_setup_success_title\");\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n\r\n    private get topComponent(): React.ReactNode | null {\r\n        if (this.state.phase === Phase.Stored) {\r\n            return <CheckmarkIcon className=\"mx_Icon mx_Icon_circle-40 mx_Icon_accent mx_Icon_bg-accent-light\" />;\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    private get classNames(): string {\r\n        return classNames(\"mx_CreateSecretStorageDialog\", {\r\n            mx_SuccessDialog: this.state.phase === Phase.Stored,\r\n        });\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        let content;\r\n        if (this.state.error) {\r\n            content = (\r\n                <div>\r\n                    <p>{_t(\"settings|key_backup|setup_secure_backup|unable_to_setup\")}</p>\r\n                    <div className=\"mx_Dialog_buttons\">\r\n                        <DialogButtons\r\n                            primaryButton={_t(\"action|retry\")}\r\n                            onPrimaryButtonClick={this.bootstrapSecretStorage}\r\n                            hasCancel={this.state.canSkip}\r\n                            onCancel={this.onCancel}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            );\r\n        } else {\r\n            switch (this.state.phase) {\r\n                case Phase.Loading:\r\n                    content = this.renderBusyPhase();\r\n                    break;\r\n                case Phase.LoadError:\r\n                    content = this.renderPhaseLoadError();\r\n                    break;\r\n                case Phase.ChooseKeyPassphrase:\r\n                    content = this.renderPhaseChooseKeyPassphrase();\r\n                    break;\r\n                case Phase.Passphrase:\r\n                    content = this.renderPhasePassPhrase();\r\n                    break;\r\n                case Phase.PassphraseConfirm:\r\n                    content = this.renderPhasePassPhraseConfirm();\r\n                    break;\r\n                case Phase.ShowKey:\r\n                    content = this.renderPhaseShowKey();\r\n                    break;\r\n                case Phase.Storing:\r\n                    content = this.renderBusyPhase();\r\n                    break;\r\n                case Phase.Stored:\r\n                    content = this.renderStoredPhase();\r\n                    break;\r\n                case Phase.ConfirmSkip:\r\n                    content = this.renderPhaseSkipConfirm();\r\n                    break;\r\n            }\r\n        }\r\n\r\n        let titleClass: string | string[] | undefined;\r\n        switch (this.state.phase) {\r\n            case Phase.Passphrase:\r\n            case Phase.PassphraseConfirm:\r\n                titleClass = [\r\n                    \"mx_CreateSecretStorageDialog_titleWithIcon\",\r\n                    \"mx_CreateSecretStorageDialog_securePhraseTitle\",\r\n                ];\r\n                break;\r\n            case Phase.ShowKey:\r\n                titleClass = [\r\n                    \"mx_CreateSecretStorageDialog_titleWithIcon\",\r\n                    \"mx_CreateSecretStorageDialog_secureBackupTitle\",\r\n                ];\r\n                break;\r\n            case Phase.ChooseKeyPassphrase:\r\n                titleClass = \"mx_CreateSecretStorageDialog_centeredTitle\";\r\n                break;\r\n        }\r\n\r\n        return (\r\n            <BaseDialog\r\n                className={this.classNames}\r\n                onFinished={this.props.onFinished}\r\n                top={this.topComponent}\r\n                title={this.titleForPhase(this.state.phase)}\r\n                titleClass={titleClass}\r\n                hasCancel={false}\r\n                fixedWidth={false}\r\n            >\r\n                <div>{content}</div>\r\n            </BaseDialog>\r\n        );\r\n    }\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2021 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type ComponentProps, PureComponent, type Ref } from \"react\";\r\n\r\nimport Field, { type IInputProps } from \"../elements/Field\";\r\nimport withValidation, { type IFieldState, type IValidationResult } from \"../elements/Validation\";\r\nimport { _t, _td, type TranslationKey } from \"../../../languageHandler\";\r\n\r\ninterface IProps extends Omit<IInputProps, \"onValidate\" | \"label\" | \"element\"> {\r\n    id?: string;\r\n    fieldRef?: Ref<Field>;\r\n    autoComplete?: string;\r\n    value: string;\r\n    password: string; // The password we're confirming\r\n\r\n    label: TranslationKey;\r\n    labelRequired: TranslationKey;\r\n    labelInvalid: TranslationKey;\r\n    tooltipAlignment?: ComponentProps<typeof Field>[\"tooltipAlignment\"];\r\n    onChange(ev: React.FormEvent<HTMLElement>): void;\r\n    onValidate?(result: IValidationResult): void;\r\n}\r\n\r\nclass PassphraseConfirmField extends PureComponent<IProps> {\r\n    public static defaultProps = {\r\n        label: _td(\"auth|change_password_confirm_label\"),\r\n        labelRequired: _td(\"auth|change_password_confirm_label\"),\r\n        labelInvalid: _td(\"auth|change_password_confirm_invalid\"),\r\n    };\r\n\r\n    private validate = withValidation({\r\n        rules: [\r\n            {\r\n                key: \"required\",\r\n                test: ({ value, allowEmpty }) => allowEmpty || !!value,\r\n                invalid: () => _t(this.props.labelRequired),\r\n            },\r\n            {\r\n                key: \"match\",\r\n                test: ({ value }) => !value || value === this.props.password,\r\n                invalid: () => _t(this.props.labelInvalid),\r\n            },\r\n        ],\r\n    });\r\n\r\n    private onValidate = async (fieldState: IFieldState): Promise<IValidationResult> => {\r\n        const result = await this.validate(fieldState);\r\n        if (this.props.onValidate) {\r\n            this.props.onValidate(result);\r\n        }\r\n\r\n        return result;\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        return (\r\n            <Field\r\n                id={this.props.id}\r\n                ref={this.props.fieldRef}\r\n                type=\"password\"\r\n                label={_t(this.props.label)}\r\n                autoComplete={this.props.autoComplete}\r\n                value={this.props.value}\r\n                onChange={this.props.onChange}\r\n                onValidate={this.onValidate}\r\n                autoFocus={this.props.autoFocus}\r\n                tooltipAlignment={this.props.tooltipAlignment}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default PassphraseConfirmField;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type ComponentProps, PureComponent, type Ref } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport type { ZxcvbnResult } from \"@zxcvbn-ts/core\";\r\nimport SdkConfig from \"../../../SdkConfig\";\r\nimport withValidation, { type IFieldState, type IValidationResult } from \"../elements/Validation\";\r\nimport { _t, _td, type TranslationKey } from \"../../../languageHandler\";\r\nimport Field, { type IInputProps } from \"../elements/Field\";\r\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\r\n\r\ninterface IProps extends Omit<IInputProps, \"onValidate\" | \"element\"> {\r\n    autoFocus?: boolean;\r\n    id?: string;\r\n    className?: string;\r\n    minScore: 0 | 1 | 2 | 3 | 4;\r\n    value: string;\r\n    fieldRef?: Ref<Field>;\r\n    // Additional strings such as a username used to catch bad passwords\r\n    userInputs?: string[];\r\n\r\n    label: TranslationKey;\r\n    labelEnterPassword: TranslationKey;\r\n    labelStrongPassword: TranslationKey;\r\n    labelAllowedButUnsafe: TranslationKey;\r\n    tooltipAlignment?: ComponentProps<typeof Field>[\"tooltipAlignment\"];\r\n\r\n    onChange(ev: React.FormEvent<HTMLElement>): void;\r\n    onValidate?(result: IValidationResult): void;\r\n}\r\n\r\nclass PassphraseField extends PureComponent<IProps> {\r\n    public static defaultProps = {\r\n        label: _td(\"common|password\"),\r\n        labelEnterPassword: _td(\"auth|password_field_label\"),\r\n        labelStrongPassword: _td(\"auth|password_field_strong_label\"),\r\n        labelAllowedButUnsafe: _td(\"auth|password_field_weak_label\"),\r\n    };\r\n\r\n    public readonly validate = withValidation<this, ZxcvbnResult | null>({\r\n        description: function (complexity) {\r\n            const score = complexity ? complexity.score : 0;\r\n            return <progress className=\"mx_PassphraseField_progress\" max={4} value={score} />;\r\n        },\r\n        deriveData: async ({ value }): Promise<ZxcvbnResult | null> => {\r\n            if (!value) return null;\r\n            const { scorePassword } = await import(\"../../../utils/PasswordScorer\");\r\n            return scorePassword(MatrixClientPeg.get(), value, this.props.userInputs);\r\n        },\r\n        rules: [\r\n            {\r\n                key: \"required\",\r\n                test: ({ value, allowEmpty }) => allowEmpty || !!value,\r\n                invalid: () => _t(this.props.labelEnterPassword),\r\n            },\r\n            {\r\n                key: \"complexity\",\r\n                test: async function ({ value }, complexity): Promise<boolean> {\r\n                    if (!value || !complexity) {\r\n                        return false;\r\n                    }\r\n                    const safe = complexity.score >= this.props.minScore;\r\n                    const allowUnsafe = SdkConfig.get(\"dangerously_allow_unsafe_and_insecure_passwords\");\r\n                    return allowUnsafe || safe;\r\n                },\r\n                valid: function (complexity) {\r\n                    // Unsafe passwords that are valid are only possible through a\r\n                    // configuration flag. We'll print some helper text to signal\r\n                    // to the user that their password is allowed, but unsafe.\r\n                    if (complexity && complexity.score >= this.props.minScore) {\r\n                        return _t(this.props.labelStrongPassword);\r\n                    }\r\n                    return _t(this.props.labelAllowedButUnsafe);\r\n                },\r\n                invalid: function (complexity) {\r\n                    if (!complexity) {\r\n                        return null;\r\n                    }\r\n                    const { feedback } = complexity;\r\n                    return feedback.warning || feedback.suggestions[0] || _t(\"auth|password_field_keep_going_prompt\");\r\n                },\r\n            },\r\n        ],\r\n        memoize: true,\r\n    });\r\n\r\n    public onValidate = async (fieldState: IFieldState): Promise<IValidationResult> => {\r\n        const result = await this.validate(fieldState);\r\n        if (this.props.onValidate) {\r\n            this.props.onValidate(result);\r\n        }\r\n        return result;\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        return (\r\n            <Field\r\n                id={this.props.id}\r\n                autoFocus={this.props.autoFocus}\r\n                className={classNames(\"mx_PassphraseField\", this.props.className)}\r\n                ref={this.props.fieldRef}\r\n                type=\"password\"\r\n                autoComplete=\"new-password\"\r\n                label={_t(this.props.label)}\r\n                value={this.props.value}\r\n                onChange={this.props.onChange}\r\n                onValidate={this.onValidate}\r\n                tooltipAlignment={this.props.tooltipAlignment}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default PassphraseField;\r\n"],"names":["b","autoBom","console","warn","test","type","Blob","XMLHttpRequest","open","responseType","onload","response","onerror","error","send","status","dispatchEvent","MouseEvent","document","createEvent","initMouseEvent","window","self","g","global","navigator","userAgent","saveAs","HTMLAnchorElement","prototype","URL","webkitURL","createElement","name","download","rel","href","origin","location","target","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","title","body","innerText","i","HTMLElement","safari","FileReader","onloadend","result","replace","readAsDataURL","module","exports","Phase","CreateSecretStorageDialog","React","constructor","props","super","_defineProperty","createRef","e","this","setState","passPhraseKeySelected","value","async","state","SecureBackupSetupMethod","Key","recoveryKey","MatrixClientPeg","safeGet","getCrypto","createRecoveryKeyFromPassphrase","copied","downloaded","setPassphrase","phase","ShowKey","Passphrase","copyNode","recoveryKeyNode","current","blob","encodedPrivateKey","FileSaver","dialogAesthetics","SSOAuthEntry","PHASE_PREAUTH","_t","continueText","continueKind","PHASE_POSTAUTH","finished","Modal","createDialog","InteractiveAuthDialog","matrixClient","makeRequest","aestheticsForStagePhases","LOGIN_TYPE","UNSTABLE_LOGIN_TYPE","confirmed","Error","cli","crypto","forceReset","backupInfo","Loading","getKeyBackupInfo","logger","LoadError","Storing","undefined","log","bootstrapSecretStorage","createSecretStorageKey","setupNewSecretStorage","resetKeyBackup","bootstrapCrossSigning","authUploadDeviceSigningKeys","doBootstrapUIAuth","setupNewKeyBackup","initialiseDehydrationIfEnabled","createNewKey","Stored","onFinished","ConfirmSkip","ChooseKeyPassphrase","preventDefault","passphraseField","validate","allowEmpty","valid","focus","focused","PassphraseConfirm","passPhrase","passPhraseConfirm","passPhraseValid","getSecureBackupSetupMethods","includes","ModuleRunner","instance","extensions","cryptoSetup","canSkip","isSecureBackupRequired","componentDidMount","keyFromCustomisations","initExtension","privateKey","renderOptionKey","StyledRadioButton","key","checked","onChange","onKeyPassphraseChange","outlined","className","renderOptionPassphrase","renderPhaseChooseKeyPassphrase","setupMethods","optionKey","optionPassphrase","onSubmit","onChooseKeyPassphraseFormSubmit","role","DialogButtons","primaryButton","onPrimaryButtonClick","onCancel","onCancelClick","hasCancel","renderPhasePassPhrase","onPassPhraseNextClick","PassphraseField","id","onPassPhraseChange","minScore","onValidate","onPassPhraseValidate","fieldRef","autoFocus","label","_td","labelEnterPassword","labelStrongPassword","labelAllowedButUnsafe","disabled","onClick","renderPhasePassPhraseConfirm","matchText","changeText","passPhraseMatch","startsWith","AccessibleButton","kind","onSetAgainClick","onPassPhraseConfirmNextClick","PassphraseConfirmField","onPassPhraseConfirmChange","labelRequired","labelInvalid","password","renderPhaseShowKey","_this$recoveryKey","continueButton","onShowKeyContinueClick","InlineSpinner","ref","onDownloadClick","downloadButton","copyButton","onCopyClick","renderBusyPhase","Spinner","renderStoredPhase","renderPhaseLoadError","onLoadRetryClick","renderPhaseSkipConfirm","onGoBackClick","titleForPhase","topComponent","CheckmarkIcon","classNames","mx_SuccessDialog","render","content","titleClass","BaseDialog","top","fixedWidth","PureComponent","args","withValidation","rules","invalid","fieldState","Field","autoComplete","tooltipAlignment","description","complexity","score","max","deriveData","scorePassword","get","userInputs","safe","SdkConfig","feedback","warning","suggestions","memoize"],"sourceRoot":""}