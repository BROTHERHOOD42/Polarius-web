{"version":3,"file":"bundles/352b00c5a33c88ed2a7a/234.js","mappings":"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","sources":["webpack://element-web/./src/components/views/dialogs/security/RestoreKeyBackupDialog.tsx","webpack://element-web/./src/async-components/views/dialogs/security/NewRecoveryMethodDialog.tsx"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\nCopyright 2018, 2019 New Vector Ltd\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type ChangeEvent } from \"react\";\r\nimport { MatrixClient, MatrixError } from \"matrix-js-sdk/src/matrix\";\r\nimport { decodeRecoveryKey, type KeyBackupInfo, type KeyBackupRestoreResult } from \"matrix-js-sdk/src/crypto-api\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport { MatrixClientPeg } from \"../../../../MatrixClientPeg\";\r\nimport { _t } from \"../../../../languageHandler\";\r\nimport { accessSecretStorage } from \"../../../../SecurityManager\";\r\nimport Spinner from \"../../elements/Spinner\";\r\nimport DialogButtons from \"../../elements/DialogButtons\";\r\nimport AccessibleButton from \"../../elements/AccessibleButton\";\r\nimport BaseDialog from \"../BaseDialog\";\r\n\r\nenum RestoreType {\r\n    Passphrase = \"passphrase\",\r\n    RecoveryKey = \"recovery_key\",\r\n    SecretStorage = \"secret_storage\",\r\n}\r\n\r\nenum ProgressState {\r\n    PreFetch = \"prefetch\",\r\n    Fetch = \"fetch\",\r\n    LoadKeys = \"load_keys\",\r\n}\r\n\r\ninterface IProps {\r\n    // if false, will close the dialog as soon as the restore completes successfully\r\n    // default: true\r\n    showSummary?: boolean;\r\n    onFinished(done?: boolean): void;\r\n}\r\n\r\ninterface IState {\r\n    backupInfo: KeyBackupInfo | null;\r\n    loading: boolean;\r\n    loadError: boolean | null;\r\n    restoreError: unknown | null;\r\n    recoveryKey: string;\r\n    recoverInfo: KeyBackupRestoreResult | null;\r\n    recoveryKeyValid: boolean;\r\n    forceRecoveryKey: boolean;\r\n    passPhrase: string;\r\n    restoreType: RestoreType | null;\r\n    progress: {\r\n        stage: ProgressState | string;\r\n        total?: number;\r\n        successes?: number;\r\n        failures?: number;\r\n    };\r\n}\r\n\r\n/*\r\n * Dialog for restoring e2e keys from a backup and the user's recovery key\r\n */\r\nexport default class RestoreKeyBackupDialog extends React.PureComponent<IProps, IState> {\r\n    public static defaultProps: Partial<IProps> = {\r\n        showSummary: true,\r\n    };\r\n\r\n    public constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            backupInfo: null,\r\n            loading: false,\r\n            loadError: null,\r\n            restoreError: null,\r\n            recoveryKey: \"\",\r\n            recoverInfo: null,\r\n            recoveryKeyValid: false,\r\n            forceRecoveryKey: false,\r\n            passPhrase: \"\",\r\n            restoreType: null,\r\n            progress: { stage: ProgressState.PreFetch },\r\n        };\r\n    }\r\n\r\n    public componentDidMount(): void {\r\n        this.loadBackupStatus();\r\n    }\r\n\r\n    private onCancel = (): void => {\r\n        this.props.onFinished(false);\r\n    };\r\n\r\n    private onDone = (): void => {\r\n        this.props.onFinished(true);\r\n    };\r\n\r\n    private onUseRecoveryKeyClick = (): void => {\r\n        this.setState({\r\n            forceRecoveryKey: true,\r\n        });\r\n    };\r\n\r\n    private progressCallback = (data: IState[\"progress\"]): void => {\r\n        this.setState({\r\n            progress: data,\r\n        });\r\n    };\r\n\r\n    private onResetRecoveryClick = (): void => {\r\n        this.props.onFinished(false);\r\n        accessSecretStorage(async (): Promise<void> => {}, { forceReset: true });\r\n    };\r\n\r\n    /**\r\n     * Check if the recovery key is valid\r\n     * @param recoveryKey\r\n     * @private\r\n     */\r\n    private isValidRecoveryKey(recoveryKey: string): boolean {\r\n        try {\r\n            decodeRecoveryKey(recoveryKey);\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private onRecoveryKeyChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({\r\n            recoveryKey: e.target.value,\r\n            recoveryKeyValid: this.isValidRecoveryKey(e.target.value),\r\n        });\r\n    };\r\n\r\n    private onPassPhraseNext = async (): Promise<void> => {\r\n        const crypto = MatrixClientPeg.safeGet().getCrypto();\r\n        if (!crypto) return;\r\n        this.setState({\r\n            loading: true,\r\n            restoreError: null,\r\n            restoreType: RestoreType.Passphrase,\r\n        });\r\n        try {\r\n            // We do still restore the key backup: we must ensure that the key backup key\r\n            // is the right one and restoring it is currently the only way we can do this.\r\n            const recoverInfo = await crypto.restoreKeyBackupWithPassphrase(this.state.passPhrase, {\r\n                progressCallback: this.progressCallback,\r\n            });\r\n\r\n            if (!this.props.showSummary) {\r\n                this.props.onFinished(true);\r\n                return;\r\n            }\r\n            this.setState({\r\n                loading: false,\r\n                recoverInfo,\r\n            });\r\n        } catch (e) {\r\n            logger.log(\"Error restoring backup\", e);\r\n            this.setState({\r\n                loading: false,\r\n                restoreError: e,\r\n            });\r\n        }\r\n    };\r\n\r\n    private onRecoveryKeyNext = async (): Promise<void> => {\r\n        const crypto = MatrixClientPeg.safeGet().getCrypto();\r\n        if (!this.state.recoveryKeyValid || !this.state.backupInfo?.version || !crypto) return;\r\n\r\n        this.setState({\r\n            loading: true,\r\n            restoreError: null,\r\n            restoreType: RestoreType.RecoveryKey,\r\n        });\r\n        try {\r\n            await crypto.storeSessionBackupPrivateKey(\r\n                decodeRecoveryKey(this.state.recoveryKey),\r\n                this.state.backupInfo.version,\r\n            );\r\n            const recoverInfo = await crypto.restoreKeyBackup({\r\n                progressCallback: this.progressCallback,\r\n            });\r\n\r\n            if (!this.props.showSummary) {\r\n                this.props.onFinished(true);\r\n                return;\r\n            }\r\n            this.setState({\r\n                loading: false,\r\n                recoverInfo,\r\n            });\r\n        } catch (e) {\r\n            logger.log(\"Error restoring backup\", e);\r\n            this.setState({\r\n                loading: false,\r\n                restoreError: e,\r\n            });\r\n        }\r\n    };\r\n\r\n    private onPassPhraseChange = (e: ChangeEvent<HTMLInputElement>): void => {\r\n        this.setState({\r\n            passPhrase: e.target.value,\r\n        });\r\n    };\r\n\r\n    private async restoreWithSecretStorage(): Promise<boolean> {\r\n        const crypto = MatrixClientPeg.safeGet().getCrypto();\r\n        if (!crypto) return false;\r\n\r\n        this.setState({\r\n            restoreError: null,\r\n            restoreType: RestoreType.SecretStorage,\r\n        });\r\n        try {\r\n            let recoverInfo: KeyBackupRestoreResult | null = null;\r\n            // `accessSecretStorage` may prompt for storage access as needed.\r\n            await accessSecretStorage(async (): Promise<void> => {\r\n                await crypto.loadSessionBackupPrivateKeyFromSecretStorage();\r\n                recoverInfo = await crypto.restoreKeyBackup({ progressCallback: this.progressCallback });\r\n            });\r\n            this.setState({\r\n                loading: false,\r\n                recoverInfo,\r\n            });\r\n            return true;\r\n        } catch (e) {\r\n            logger.log(\"restoreWithSecretStorage failed:\", e);\r\n            this.setState({\r\n                restoreError: e,\r\n                loading: false,\r\n            });\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private async restoreWithCachedKey(backupInfo: KeyBackupInfo | null): Promise<boolean> {\r\n        const crypto = MatrixClientPeg.safeGet().getCrypto();\r\n        if (!crypto) return false;\r\n        try {\r\n            const recoverInfo = await crypto.restoreKeyBackup({ progressCallback: this.progressCallback });\r\n            this.setState({\r\n                recoverInfo,\r\n            });\r\n            return true;\r\n        } catch (e) {\r\n            logger.log(\"restoreWithCachedKey failed:\", e);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private async loadBackupStatus(): Promise<void> {\r\n        this.setState({\r\n            loading: true,\r\n            loadError: null,\r\n        });\r\n        try {\r\n            const cli = MatrixClientPeg.safeGet();\r\n            const backupInfo = (await cli.getCrypto()?.getKeyBackupInfo()) ?? null;\r\n            const has4S = await cli.secretStorage.hasKey();\r\n            const backupKeyStored = has4S ? await cli.isKeyBackupKeyStored() : null;\r\n            this.setState({\r\n                backupInfo,\r\n            });\r\n\r\n            const gotCache = await this.restoreWithCachedKey(backupInfo);\r\n            if (gotCache) {\r\n                logger.log(\"RestoreKeyBackupDialog: found cached backup key\");\r\n                this.setState({\r\n                    loading: false,\r\n                });\r\n                return;\r\n            }\r\n\r\n            const hasBackupFromSS = backupKeyStored && (await this.restoreWithSecretStorage());\r\n            if (hasBackupFromSS) {\r\n                logger.log(\"RestoreKeyBackupDialog: found backup key in secret storage\");\r\n                this.setState({\r\n                    loading: false,\r\n                });\r\n                return;\r\n            }\r\n\r\n            this.setState({\r\n                loadError: null,\r\n                loading: false,\r\n            });\r\n        } catch (e) {\r\n            logger.log(\"Error loading backup status\", e);\r\n            this.setState({\r\n                loadError: true,\r\n                loading: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    public render(): React.ReactNode {\r\n        const backupHasPassphrase =\r\n            this.state.backupInfo &&\r\n            this.state.backupInfo.auth_data &&\r\n            this.state.backupInfo.auth_data.private_key_salt &&\r\n            this.state.backupInfo.auth_data.private_key_iterations;\r\n\r\n        let content;\r\n        let title;\r\n        if (this.state.loading) {\r\n            title = _t(\"encryption|access_secret_storage_dialog|restoring\");\r\n            let details;\r\n            if (this.state.progress.stage === ProgressState.Fetch) {\r\n                details = _t(\"restore_key_backup_dialog|key_fetch_in_progress\");\r\n            } else if (this.state.progress.stage === ProgressState.LoadKeys) {\r\n                const { total, successes, failures } = this.state.progress;\r\n                details = _t(\"restore_key_backup_dialog|load_keys_progress\", {\r\n                    total,\r\n                    completed: (successes ?? 0) + (failures ?? 0),\r\n                });\r\n            } else if (this.state.progress.stage === ProgressState.PreFetch) {\r\n                details = _t(\"restore_key_backup_dialog|key_fetch_in_progress\");\r\n            }\r\n            content = (\r\n                <div>\r\n                    <div>{details}</div>\r\n                    <Spinner />\r\n                </div>\r\n            );\r\n        } else if (this.state.loadError) {\r\n            title = _t(\"common|error\");\r\n            content = _t(\"restore_key_backup_dialog|load_error_content\");\r\n        } else if (this.state.restoreError) {\r\n            if (\r\n                this.state.restoreError instanceof MatrixError &&\r\n                this.state.restoreError.errcode === MatrixClient.RESTORE_BACKUP_ERROR_BAD_KEY\r\n            ) {\r\n                if (this.state.restoreType === RestoreType.RecoveryKey) {\r\n                    title = _t(\"restore_key_backup_dialog|recovery_key_mismatch_title\");\r\n                    content = (\r\n                        <div>\r\n                            <p>{_t(\"restore_key_backup_dialog|recovery_key_mismatch_description\")}</p>\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    title = _t(\"restore_key_backup_dialog|incorrect_security_phrase_title\");\r\n                    content = (\r\n                        <div>\r\n                            <p>{_t(\"restore_key_backup_dialog|incorrect_security_phrase_dialog\")}</p>\r\n                        </div>\r\n                    );\r\n                }\r\n            } else {\r\n                title = _t(\"common|error\");\r\n                content = _t(\"restore_key_backup_dialog|restore_failed_error\");\r\n            }\r\n        } else if (this.state.backupInfo === null) {\r\n            title = _t(\"common|error\");\r\n            content = _t(\"restore_key_backup_dialog|no_backup_error\");\r\n        } else if (this.state.recoverInfo) {\r\n            title = _t(\"restore_key_backup_dialog|keys_restored_title\");\r\n            let failedToDecrypt;\r\n            if (this.state.recoverInfo.total > this.state.recoverInfo.imported) {\r\n                failedToDecrypt = (\r\n                    <p>\r\n                        {_t(\"restore_key_backup_dialog|count_of_decryption_failures\", {\r\n                            failedCount: this.state.recoverInfo.total - this.state.recoverInfo.imported,\r\n                        })}\r\n                    </p>\r\n                );\r\n            }\r\n            content = (\r\n                <div>\r\n                    <p>\r\n                        {_t(\"restore_key_backup_dialog|count_of_successfully_restored_keys\", {\r\n                            sessionCount: this.state.recoverInfo.imported,\r\n                        })}\r\n                    </p>\r\n                    {failedToDecrypt}\r\n                    <DialogButtons\r\n                        primaryButton={_t(\"action|ok\")}\r\n                        onPrimaryButtonClick={this.onDone}\r\n                        hasCancel={false}\r\n                        focus={true}\r\n                    />\r\n                </div>\r\n            );\r\n        } else if (backupHasPassphrase && !this.state.forceRecoveryKey) {\r\n            title = _t(\"restore_key_backup_dialog|enter_phrase_title\");\r\n            content = (\r\n                <div>\r\n                    <p>\r\n                        {_t(\"restore_key_backup_dialog|key_backup_warning\", {}, { b: (sub) => <strong>{sub}</strong> })}\r\n                    </p>\r\n                    <p>{_t(\"restore_key_backup_dialog|enter_phrase_description\")}</p>\r\n\r\n                    <form className=\"mx_RestoreKeyBackupDialog_primaryContainer\">\r\n                        <input\r\n                            data-testid=\"passphraseInput\"\r\n                            type=\"password\"\r\n                            className=\"mx_RestoreKeyBackupDialog_passPhraseInput\"\r\n                            onChange={this.onPassPhraseChange}\r\n                            value={this.state.passPhrase}\r\n                            autoFocus={true}\r\n                        />\r\n                        <DialogButtons\r\n                            primaryButton={_t(\"action|next\")}\r\n                            onPrimaryButtonClick={this.onPassPhraseNext}\r\n                            primaryIsSubmit={true}\r\n                            hasCancel={true}\r\n                            onCancel={this.onCancel}\r\n                            focus={false}\r\n                        />\r\n                    </form>\r\n                    {_t(\r\n                        \"restore_key_backup_dialog|phrase_forgotten_text\",\r\n                        {},\r\n                        {\r\n                            button1: (s) => (\r\n                                <AccessibleButton kind=\"link_inline\" onClick={this.onUseRecoveryKeyClick}>\r\n                                    {s}\r\n                                </AccessibleButton>\r\n                            ),\r\n                            button2: (s) => (\r\n                                <AccessibleButton kind=\"link_inline\" onClick={this.onResetRecoveryClick}>\r\n                                    {s}\r\n                                </AccessibleButton>\r\n                            ),\r\n                        },\r\n                    )}\r\n                </div>\r\n            );\r\n        } else {\r\n            title = _t(\"restore_key_backup_dialog|enter_key_title\");\r\n\r\n            let keyStatus;\r\n            if (this.state.recoveryKey.length === 0) {\r\n                keyStatus = <div className=\"mx_RestoreKeyBackupDialog_keyStatus\" />;\r\n            } else if (this.state.recoveryKeyValid) {\r\n                keyStatus = (\r\n                    <div className=\"mx_RestoreKeyBackupDialog_keyStatus\">\r\n                        {\"\\uD83D\\uDC4D \"}\r\n                        {_t(\"restore_key_backup_dialog|key_is_valid\")}\r\n                    </div>\r\n                );\r\n            } else {\r\n                keyStatus = (\r\n                    <div className=\"mx_RestoreKeyBackupDialog_keyStatus\">\r\n                        {\"\\uD83D\\uDC4E \"}\r\n                        {_t(\"restore_key_backup_dialog|key_is_invalid\")}\r\n                    </div>\r\n                );\r\n            }\r\n\r\n            content = (\r\n                <div>\r\n                    <p>\r\n                        {_t(\"restore_key_backup_dialog|key_backup_warning\", {}, { b: (sub) => <strong>{sub}</strong> })}\r\n                    </p>\r\n                    <p>{_t(\"restore_key_backup_dialog|enter_key_description\")}</p>\r\n\r\n                    <div className=\"mx_RestoreKeyBackupDialog_primaryContainer\">\r\n                        <input\r\n                            className=\"mx_RestoreKeyBackupDialog_recoveryKeyInput\"\r\n                            onChange={this.onRecoveryKeyChange}\r\n                            value={this.state.recoveryKey}\r\n                            autoFocus={true}\r\n                        />\r\n                        {keyStatus}\r\n                        <DialogButtons\r\n                            primaryButton={_t(\"action|next\")}\r\n                            onPrimaryButtonClick={this.onRecoveryKeyNext}\r\n                            hasCancel={true}\r\n                            onCancel={this.onCancel}\r\n                            focus={false}\r\n                            primaryDisabled={!this.state.recoveryKeyValid}\r\n                        />\r\n                    </div>\r\n                    {_t(\r\n                        \"restore_key_backup_dialog|key_forgotten_text\",\r\n                        {},\r\n                        {\r\n                            button: (s) => (\r\n                                <AccessibleButton kind=\"link_inline\" onClick={this.onResetRecoveryClick}>\r\n                                    {s}\r\n                                </AccessibleButton>\r\n                            ),\r\n                        },\r\n                    )}\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <BaseDialog className=\"mx_RestoreKeyBackupDialog\" onFinished={this.props.onFinished} title={title}>\r\n                <div className=\"mx_RestoreKeyBackupDialog_content\">{content}</div>\r\n            </BaseDialog>\r\n        );\r\n    }\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2020 The Matrix.org Foundation C.I.C.\r\nCopyright 2018, 2019 New Vector Ltd\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX, useEffect, useState } from \"react\";\r\n\r\nimport dis from \"../../../../dispatcher/dispatcher\";\r\nimport { _t } from \"../../../../languageHandler\";\r\nimport Modal from \"../../../../Modal\";\r\nimport RestoreKeyBackupDialog from \"../../../../components/views/dialogs/security/RestoreKeyBackupDialog\";\r\nimport { Action } from \"../../../../dispatcher/actions\";\r\nimport DialogButtons from \"../../../../components/views/elements/DialogButtons\";\r\nimport BaseDialog from \"../../../../components/views/dialogs/BaseDialog\";\r\nimport { useMatrixClientContext } from \"../../../../contexts/MatrixClientContext.tsx\";\r\n\r\n/**\r\n * Properties for {@link NewRecoveryMethodDialog}.\r\n */\r\ninterface NewRecoveryMethodDialogProps {\r\n    /**\r\n     * Callback when the dialog is dismissed.\r\n     */\r\n    onFinished(): void;\r\n}\r\n\r\n// Export as default instead of a named export so that it can be dynamically imported with React lazy\r\n\r\n/**\r\n * Dialog to inform the user that a new recovery method has been detected.\r\n */\r\nexport default function NewRecoveryMethodDialog({ onFinished }: NewRecoveryMethodDialogProps): JSX.Element {\r\n    const matrixClient = useMatrixClientContext();\r\n    const [isKeyBackupEnabled, setIsKeyBackupEnabled] = useState(false);\r\n    useEffect(() => {\r\n        const checkBackupEnabled = async (): Promise<void> => {\r\n            const crypto = matrixClient.getCrypto();\r\n            setIsKeyBackupEnabled(Boolean(crypto && (await crypto.getActiveSessionBackupVersion()) !== null));\r\n        };\r\n\r\n        checkBackupEnabled();\r\n    }, [matrixClient]);\r\n\r\n    function onClick(): void {\r\n        if (isKeyBackupEnabled) {\r\n            onFinished();\r\n        } else {\r\n            const { finished } = Modal.createDialog(RestoreKeyBackupDialog, {}, undefined, false, true);\r\n            finished.then(onFinished);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <BaseDialog\r\n            className=\"mx_KeyBackupFailedDialog\"\r\n            onFinished={onFinished}\r\n            title={\r\n                <span className=\"mx_KeyBackupFailedDialog_title\">\r\n                    {_t(\"encryption|new_recovery_method_detected|title\")}\r\n                </span>\r\n            }\r\n        >\r\n            <p>{_t(\"encryption|new_recovery_method_detected|description_1\")}</p>\r\n            {isKeyBackupEnabled && <p>{_t(\"encryption|new_recovery_method_detected|description_2\")}</p>}\r\n            <strong className=\"warning\">{_t(\"encryption|new_recovery_method_detected|warning\")}</strong>\r\n            <DialogButtons\r\n                primaryButton={_t(\"common|setup_secure_messages\")}\r\n                onPrimaryButtonClick={onClick}\r\n                cancelButton={_t(\"common|go_to_settings\")}\r\n                onCancel={() => {\r\n                    onFinished();\r\n                    dis.fire(Action.ViewUserSettings);\r\n                }}\r\n            />\r\n        </BaseDialog>\r\n    );\r\n}\r\n"],"names":["RestoreType","ProgressState","RestoreKeyBackupDialog","React","constructor","props","super","_defineProperty","this","onFinished","setState","forceRecoveryKey","data","progress","accessSecretStorage","async","forceReset","e","recoveryKey","target","value","recoveryKeyValid","isValidRecoveryKey","crypto","MatrixClientPeg","safeGet","getCrypto","loading","restoreError","restoreType","Passphrase","recoverInfo","restoreKeyBackupWithPassphrase","state","passPhrase","progressCallback","showSummary","logger","log","_this$state$backupInf","backupInfo","version","RecoveryKey","storeSessionBackupPrivateKey","decodeRecoveryKey","restoreKeyBackup","loadError","stage","PreFetch","componentDidMount","loadBackupStatus","restoreWithSecretStorage","SecretStorage","loadSessionBackupPrivateKeyFromSecretStorage","restoreWithCachedKey","_await$cli$getCrypto$","_cli$getCrypto","cli","getKeyBackupInfo","backupKeyStored","secretStorage","hasKey","isKeyBackupKeyStored","render","backupHasPassphrase","auth_data","private_key_salt","private_key_iterations","content","title","details","_t","Fetch","LoadKeys","total","successes","failures","completed","Spinner","MatrixError","errcode","MatrixClient","RESTORE_BACKUP_ERROR_BAD_KEY","failedToDecrypt","imported","failedCount","sessionCount","DialogButtons","primaryButton","onPrimaryButtonClick","onDone","hasCancel","focus","b","sub","className","type","onChange","onPassPhraseChange","autoFocus","onPassPhraseNext","primaryIsSubmit","onCancel","button1","s","AccessibleButton","kind","onClick","onUseRecoveryKeyClick","button2","onResetRecoveryClick","keyStatus","length","onRecoveryKeyChange","onRecoveryKeyNext","primaryDisabled","button","BaseDialog","NewRecoveryMethodDialog","matrixClient","useMatrixClientContext","isKeyBackupEnabled","setIsKeyBackupEnabled","useState","useEffect","Boolean","getActiveSessionBackupVersion","checkBackupEnabled","finished","Modal","createDialog","undefined","then","cancelButton","dis","fire","Action","ViewUserSettings"],"sourceRoot":""}