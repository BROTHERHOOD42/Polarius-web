{"version":3,"file":"bundles/352b00c5a33c88ed2a7a/1188.js","mappings":"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","sources":["webpack://element-web/./node_modules/@vector-im/compound-design-tokens/assets/web/icons/lock-off.js","webpack://element-web/./src/components/views/rooms/CollapsibleButton.tsx","webpack://element-web/./src/components/views/rooms/EmojiButton.tsx","webpack://element-web/./src/components/views/rooms/MessageComposerButtons.tsx","webpack://element-web/./src/components/views/rooms/wysiwyg_composer/hooks/useSuggestion.ts","webpack://element-web/./src/components/views/rooms/wysiwyg_composer/hooks/usePlainTextListeners.ts","webpack://element-web/./src/components/views/rooms/wysiwyg_composer/components/PlainTextComposer.tsx","webpack://element-web/./src/components/views/rooms/wysiwyg_composer/hooks/useComposerFunctions.ts","webpack://element-web/./src/components/views/rooms/wysiwyg_composer/hooks/usePlainTextInitialization.ts","webpack://element-web/./src/components/views/rooms/wysiwyg_composer/components/Emoji.tsx","webpack://element-web/./src/components/views/rooms/wysiwyg_composer/SendWysiwygComposer.tsx","webpack://element-web/./src/components/views/rooms/wysiwyg_composer/hooks/useWysiwygSendActionHandler.ts"],"sourcesContent":["import { forwardRef } from \"react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction LockOffIcon(props, ref) {\n  return /*#__PURE__*/_jsx(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"1em\",\n    height: \"1em\",\n    fill: \"currentColor\",\n    viewBox: \"0 0 24 24\",\n    ref: ref,\n    ...props,\n    children: /*#__PURE__*/_jsx(\"path\", {\n      d: \"M6 22q-.825 0-1.412-.587A1.93 1.93 0 0 1 4 20V10q0-.825.588-1.412a2 2 0 0 1 .702-.463L1.333 4.167a1 1 0 0 1 1.414-1.414L7 7.006v-.012l13 13v.012l1.247 1.247a1 1 0 1 1-1.414 1.414l-.896-.896A1.94 1.94 0 0 1 18 22zm14-4.834V10q0-.825-.587-1.412A1.93 1.93 0 0 0 18 8h-1V6q0-2.075-1.463-3.537Q14.075 1 12 1T8.463 2.463a4.9 4.9 0 0 0-1.22 1.946L9 6.166V6q0-1.25.875-2.125A2.9 2.9 0 0 1 12 3q1.25 0 2.125.875T15 6v2h-4.166z\"\n    })\n  });\n}\n;\nLockOffIcon.displayName = \"LockOffIcon\";\nexport default forwardRef(LockOffIcon);","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2021 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type RefObject, useContext } from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\nimport AccessibleButton, { type ButtonProps } from \"../elements/AccessibleButton\";\r\nimport { OverflowMenuContext } from \"./MessageComposerButtons\";\r\nimport { IconizedContextMenuOption } from \"../context_menus/IconizedContextMenu\";\r\n\r\ninterface Props extends Omit<ButtonProps<\"div\">, \"element\"> {\r\n    inputRef?: RefObject<HTMLElement | null>;\r\n    title: string;\r\n    iconClassName: string;\r\n}\r\n\r\nexport const CollapsibleButton: React.FC<Props> = ({\r\n    title,\r\n    children,\r\n    className,\r\n    iconClassName,\r\n    inputRef,\r\n    ...props\r\n}) => {\r\n    const inOverflowMenu = !!useContext(OverflowMenuContext);\r\n    if (inOverflowMenu) {\r\n        return <IconizedContextMenuOption {...props} iconClassName={iconClassName} label={title} inputRef={inputRef} />;\r\n    }\r\n\r\n    return (\r\n        <AccessibleButton {...props} title={title} className={classNames(className, iconClassName)} ref={inputRef}>\r\n            {children}\r\n        </AccessibleButton>\r\n    );\r\n};\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport classNames from \"classnames\";\r\nimport React, { type JSX, useContext } from \"react\";\r\n\r\nimport { _t } from \"../../../languageHandler\";\r\nimport ContextMenu, { aboveLeftOf, type MenuProps, useContextMenu } from \"../../structures/ContextMenu\";\r\nimport EmojiPicker from \"../emojipicker/EmojiPicker\";\r\nimport { CollapsibleButton } from \"./CollapsibleButton\";\r\nimport { OverflowMenuContext } from \"./MessageComposerButtons\";\r\n\r\ninterface IEmojiButtonProps {\r\n    addEmoji: (unicode: string) => boolean;\r\n    menuPosition?: MenuProps;\r\n    className?: string;\r\n}\r\n\r\nexport function EmojiButton({ addEmoji, menuPosition, className }: IEmojiButtonProps): JSX.Element {\r\n    const overflowMenuCloser = useContext(OverflowMenuContext);\r\n    const [menuDisplayed, button, openMenu, closeMenu] = useContextMenu();\r\n\r\n    let contextMenu: React.ReactElement | null = null;\r\n    if (menuDisplayed && button.current) {\r\n        const position = menuPosition ?? aboveLeftOf(button.current.getBoundingClientRect());\r\n        const onFinished = (): void => {\r\n            closeMenu();\r\n            overflowMenuCloser?.();\r\n        };\r\n\r\n        contextMenu = (\r\n            <ContextMenu {...position} onFinished={onFinished} managed={false}>\r\n                <EmojiPicker onChoose={addEmoji} onFinished={onFinished} />\r\n            </ContextMenu>\r\n        );\r\n    }\r\n\r\n    const computedClassName = classNames(\"mx_EmojiButton\", className, {\r\n        mx_EmojiButton_highlight: menuDisplayed,\r\n    });\r\n\r\n    // TODO: replace ContextMenuTooltipButton with a unified representation of\r\n    // the header buttons and the right panel buttons\r\n    return (\r\n        <>\r\n            <CollapsibleButton\r\n                className={computedClassName}\r\n                iconClassName=\"mx_EmojiButton_icon\"\r\n                onClick={openMenu}\r\n                title={_t(\"common|emoji\")}\r\n                inputRef={button}\r\n            />\r\n\r\n            {contextMenu}\r\n        </>\r\n    );\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport classNames from \"classnames\";\r\nimport {\r\n    type IEventRelation,\r\n    type Room,\r\n    type MatrixClient,\r\n    THREAD_RELATION_TYPE,\r\n    M_POLL_START,\r\n} from \"matrix-js-sdk/src/matrix\";\r\nimport React, { type JSX, createContext, type ReactElement, type ReactNode, useContext, useRef } from \"react\";\r\n\r\nimport { _t } from \"../../../languageHandler\";\r\nimport { CollapsibleButton } from \"./CollapsibleButton\";\r\nimport { type MenuProps } from \"../../structures/ContextMenu\";\r\nimport dis from \"../../../dispatcher/dispatcher\";\r\nimport ErrorDialog from \"../dialogs/ErrorDialog\";\r\nimport { LocationButton } from \"../location\";\r\nimport Modal from \"../../../Modal\";\r\nimport PollCreateDialog from \"../elements/PollCreateDialog\";\r\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\r\nimport ContentMessages from \"../../../ContentMessages\";\r\nimport MatrixClientContext from \"../../../contexts/MatrixClientContext\";\r\nimport { useDispatcher } from \"../../../hooks/useDispatcher\";\r\nimport { chromeFileInputFix } from \"../../../utils/BrowserWorkarounds\";\r\nimport IconizedContextMenu, { IconizedContextMenuOptionList } from \"../context_menus/IconizedContextMenu\";\r\nimport { EmojiButton } from \"./EmojiButton\";\r\nimport { filterBoolean } from \"../../../utils/arrays\";\r\nimport { useSettingValue } from \"../../../hooks/useSettings\";\r\nimport AccessibleButton, { type ButtonEvent } from \"../elements/AccessibleButton\";\r\nimport { useScopedRoomContext } from \"../../../contexts/ScopedRoomContext.tsx\";\r\n\r\ninterface IProps {\r\n    addEmoji: (emoji: string) => boolean;\r\n    haveRecording: boolean;\r\n    isMenuOpen: boolean;\r\n    isStickerPickerOpen: boolean;\r\n    menuPosition?: MenuProps;\r\n    onRecordStartEndClick: () => void;\r\n    relation?: IEventRelation;\r\n    setStickerPickerOpen: (isStickerPickerOpen: boolean) => void;\r\n    showLocationButton: boolean;\r\n    showPollsButton: boolean;\r\n    showStickersButton: boolean;\r\n    toggleButtonMenu: () => void;\r\n    isRichTextEnabled: boolean;\r\n    onComposerModeClick: () => void;\r\n}\r\n\r\ntype OverflowMenuCloser = () => void;\r\nexport const OverflowMenuContext = createContext<OverflowMenuCloser | null>(null);\r\n\r\nconst MessageComposerButtons: React.FC<IProps> = (props: IProps) => {\r\n    const matrixClient = useContext(MatrixClientContext);\r\n    const { room, narrow } = useScopedRoomContext(\"room\", \"narrow\");\r\n\r\n    const isWysiwygLabEnabled = useSettingValue(\"feature_wysiwyg_composer\");\r\n\r\n    if (!matrixClient || !room || props.haveRecording) {\r\n        return null;\r\n    }\r\n\r\n    let mainButtons: ReactNode[];\r\n    let moreButtons: ReactNode[];\r\n    if (narrow) {\r\n        mainButtons = [\r\n            isWysiwygLabEnabled ? (\r\n                <ComposerModeButton\r\n                    key=\"composerModeButton\"\r\n                    isRichTextEnabled={props.isRichTextEnabled}\r\n                    onClick={props.onComposerModeClick}\r\n                />\r\n            ) : (\r\n                emojiButton(props)\r\n            ),\r\n        ];\r\n        moreButtons = [\r\n            uploadButton(), // props passed via UploadButtonContext\r\n            showStickersButton(props),\r\n            voiceRecordingButton(props, narrow),\r\n            props.showPollsButton ? pollButton(room, props.relation) : null,\r\n            showLocationButton(props, room, matrixClient),\r\n        ];\r\n    } else {\r\n        mainButtons = [\r\n            isWysiwygLabEnabled ? (\r\n                <ComposerModeButton\r\n                    key=\"composerModeButton\"\r\n                    isRichTextEnabled={props.isRichTextEnabled}\r\n                    onClick={props.onComposerModeClick}\r\n                />\r\n            ) : (\r\n                emojiButton(props)\r\n            ),\r\n            uploadButton(), // props passed via UploadButtonContext\r\n        ];\r\n        moreButtons = [\r\n            showStickersButton(props),\r\n            voiceRecordingButton(props, narrow),\r\n            props.showPollsButton ? pollButton(room, props.relation) : null,\r\n            showLocationButton(props, room, matrixClient),\r\n        ];\r\n    }\r\n\r\n    mainButtons = filterBoolean(mainButtons);\r\n    moreButtons = filterBoolean(moreButtons);\r\n\r\n    const moreOptionsClasses = classNames({\r\n        mx_MessageComposer_button: true,\r\n        mx_MessageComposer_buttonMenu: true,\r\n        mx_MessageComposer_closeButtonMenu: props.isMenuOpen,\r\n    });\r\n\r\n    return (\r\n        <UploadButtonContextProvider roomId={room.roomId} relation={props.relation}>\r\n            {mainButtons}\r\n            {moreButtons.length > 0 && (\r\n                <AccessibleButton\r\n                    className={moreOptionsClasses}\r\n                    onClick={props.toggleButtonMenu}\r\n                    title={_t(\"quick_settings|sidebar_settings\")}\r\n                />\r\n            )}\r\n            {props.isMenuOpen && (\r\n                <IconizedContextMenu\r\n                    onFinished={props.toggleButtonMenu}\r\n                    {...props.menuPosition}\r\n                    wrapperClassName=\"mx_MessageComposer_Menu\"\r\n                    compact={true}\r\n                >\r\n                    <OverflowMenuContext.Provider value={props.toggleButtonMenu}>\r\n                        <IconizedContextMenuOptionList>{moreButtons}</IconizedContextMenuOptionList>\r\n                    </OverflowMenuContext.Provider>\r\n                </IconizedContextMenu>\r\n            )}\r\n        </UploadButtonContextProvider>\r\n    );\r\n};\r\n\r\nfunction emojiButton(props: IProps): ReactElement {\r\n    return (\r\n        <EmojiButton\r\n            key=\"emoji_button\"\r\n            addEmoji={props.addEmoji}\r\n            menuPosition={props.menuPosition}\r\n            className=\"mx_MessageComposer_button\"\r\n        />\r\n    );\r\n}\r\n\r\nfunction uploadButton(): ReactElement {\r\n    return <UploadButton key=\"controls_upload\" />;\r\n}\r\n\r\ntype UploadButtonFn = () => void;\r\nexport const UploadButtonContext = createContext<UploadButtonFn | null>(null);\r\n\r\ninterface IUploadButtonProps {\r\n    roomId: string;\r\n    relation?: IEventRelation;\r\n    children: ReactNode;\r\n}\r\n\r\n// We put the file input outside the UploadButton component so that it doesn't get killed when the context menu closes.\r\nconst UploadButtonContextProvider: React.FC<IUploadButtonProps> = ({ roomId, relation, children }) => {\r\n    const cli = useContext(MatrixClientContext);\r\n    const roomContext = useScopedRoomContext(\"timelineRenderingType\");\r\n    const uploadInput = useRef<HTMLInputElement>(null);\r\n\r\n    const onUploadClick = (): void => {\r\n        if (cli?.isGuest()) {\r\n            dis.dispatch({ action: \"require_registration\" });\r\n            return;\r\n        }\r\n        uploadInput.current?.click();\r\n    };\r\n\r\n    useDispatcher(dis, (payload) => {\r\n        if (roomContext.timelineRenderingType === payload.context && payload.action === \"upload_file\") {\r\n            onUploadClick();\r\n        }\r\n    });\r\n\r\n    const onUploadFileInputChange = (ev: React.ChangeEvent<HTMLInputElement>): void => {\r\n        if (ev.target.files?.length === 0) return;\r\n\r\n        // Take a copy, so we can safely reset the value of the form control\r\n        ContentMessages.sharedInstance().sendContentListToRoom(\r\n            Array.from(ev.target.files!),\r\n            roomId,\r\n            relation,\r\n            cli,\r\n            roomContext.timelineRenderingType,\r\n        );\r\n\r\n        // This is the onChange handler for a file form control, but we're\r\n        // not keeping any state, so reset the value of the form control\r\n        // to empty.\r\n        // NB. we need to set 'value': the 'files' property is immutable.\r\n        ev.target.value = \"\";\r\n    };\r\n\r\n    const uploadInputStyle = { display: \"none\" };\r\n    return (\r\n        <UploadButtonContext.Provider value={onUploadClick}>\r\n            {children}\r\n\r\n            <input\r\n                ref={uploadInput}\r\n                type=\"file\"\r\n                style={uploadInputStyle}\r\n                multiple\r\n                onClick={chromeFileInputFix}\r\n                onChange={onUploadFileInputChange}\r\n            />\r\n        </UploadButtonContext.Provider>\r\n    );\r\n};\r\n\r\n// Must be rendered within an UploadButtonContextProvider\r\nconst UploadButton: React.FC = () => {\r\n    const overflowMenuCloser = useContext(OverflowMenuContext);\r\n    const uploadButtonFn = useContext(UploadButtonContext);\r\n\r\n    const onClick = (): void => {\r\n        uploadButtonFn?.();\r\n        overflowMenuCloser?.(); // close overflow menu\r\n    };\r\n\r\n    return (\r\n        <CollapsibleButton\r\n            className=\"mx_MessageComposer_button\"\r\n            iconClassName=\"mx_MessageComposer_upload\"\r\n            onClick={onClick}\r\n            title={_t(\"common|attachment\")}\r\n        />\r\n    );\r\n};\r\n\r\nfunction showStickersButton(props: IProps): ReactElement | null {\r\n    return props.showStickersButton ? (\r\n        <CollapsibleButton\r\n            id=\"stickersButton\"\r\n            key=\"controls_stickers\"\r\n            className=\"mx_MessageComposer_button\"\r\n            iconClassName=\"mx_MessageComposer_stickers\"\r\n            onClick={() => props.setStickerPickerOpen(!props.isStickerPickerOpen)}\r\n            title={props.isStickerPickerOpen ? _t(\"composer|close_sticker_picker\") : _t(\"common|sticker\")}\r\n        />\r\n    ) : null;\r\n}\r\n\r\nfunction voiceRecordingButton(props: IProps, narrow: boolean): ReactElement | null {\r\n    // XXX: recording UI does not work well in narrow mode, so hide for now\r\n    return narrow ? null : (\r\n        <CollapsibleButton\r\n            key=\"voice_message_send\"\r\n            className=\"mx_MessageComposer_button\"\r\n            iconClassName=\"mx_MessageComposer_voiceMessage\"\r\n            onClick={props.onRecordStartEndClick}\r\n            title={_t(\"composer|voice_message_button\")}\r\n        />\r\n    );\r\n}\r\n\r\nfunction pollButton(room: Room, relation?: IEventRelation): ReactElement {\r\n    return <PollButton key=\"polls\" room={room} relation={relation} />;\r\n}\r\n\r\ninterface IPollButtonProps {\r\n    room: Room;\r\n    relation?: IEventRelation;\r\n}\r\n\r\nclass PollButton extends React.PureComponent<IPollButtonProps> {\r\n    public static contextType = OverflowMenuContext;\r\n    declare public context: React.ContextType<typeof OverflowMenuContext>;\r\n\r\n    private onCreateClick = (): void => {\r\n        this.context?.(); // close overflow menu\r\n        const canSend = this.props.room.currentState.maySendEvent(\r\n            M_POLL_START.name,\r\n            MatrixClientPeg.safeGet().getSafeUserId(),\r\n        );\r\n        if (!canSend) {\r\n            Modal.createDialog(ErrorDialog, {\r\n                title: _t(\"composer|poll_button_no_perms_title\"),\r\n                description: _t(\"composer|poll_button_no_perms_description\"),\r\n            });\r\n        } else {\r\n            const threadId =\r\n                this.props.relation?.rel_type === THREAD_RELATION_TYPE.name ? this.props.relation.event_id : undefined;\r\n\r\n            Modal.createDialog(\r\n                PollCreateDialog,\r\n                {\r\n                    room: this.props.room,\r\n                    threadId,\r\n                },\r\n                \"mx_CompoundDialog\",\r\n                false, // isPriorityModal\r\n                true, // isStaticModal\r\n            );\r\n        }\r\n    };\r\n\r\n    public render(): React.ReactNode {\r\n        // do not allow sending polls within threads at this time\r\n        if (this.props.relation?.rel_type === THREAD_RELATION_TYPE.name) return null;\r\n\r\n        return (\r\n            <CollapsibleButton\r\n                className=\"mx_MessageComposer_button\"\r\n                iconClassName=\"mx_MessageComposer_poll\"\r\n                onClick={this.onCreateClick}\r\n                title={_t(\"composer|poll_button\")}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nfunction showLocationButton(props: IProps, room: Room, matrixClient: MatrixClient): ReactElement | null {\r\n    const sender = room.getMember(matrixClient.getSafeUserId());\r\n\r\n    return props.showLocationButton && sender ? (\r\n        <LocationButton\r\n            key=\"location\"\r\n            roomId={room.roomId}\r\n            relation={props.relation}\r\n            sender={sender}\r\n            menuPosition={props.menuPosition}\r\n        />\r\n    ) : null;\r\n}\r\n\r\ninterface WysiwygToggleButtonProps {\r\n    isRichTextEnabled: boolean;\r\n    onClick: (ev: ButtonEvent) => void;\r\n}\r\n\r\nfunction ComposerModeButton({ isRichTextEnabled, onClick }: WysiwygToggleButtonProps): JSX.Element {\r\n    const title = isRichTextEnabled ? _t(\"composer|mode_plain\") : _t(\"composer|mode_rich_text\");\r\n\r\n    return (\r\n        <CollapsibleButton\r\n            className=\"mx_MessageComposer_button\"\r\n            iconClassName={classNames({\r\n                mx_MessageComposer_plain_text: !isRichTextEnabled,\r\n                mx_MessageComposer_rich_text: isRichTextEnabled,\r\n            })}\r\n            onClick={onClick}\r\n            title={title}\r\n        />\r\n    );\r\n}\r\n\r\nexport default MessageComposerButtons;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2023 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { EMOTICON_TO_EMOJI } from \"@matrix-org/emojibase-bindings\";\r\nimport { type AllowedMentionAttributes, type MappedSuggestion } from \"@vector-im/matrix-wysiwyg\";\r\nimport { type SyntheticEvent, useState, type SetStateAction } from \"react\";\r\nimport { logger } from \"matrix-js-sdk/src/logger\";\r\n\r\nimport { isNotNull } from \"../../../../../Typeguards\";\r\n\r\n/**\r\n * Information about the current state of the `useSuggestion` hook.\r\n */\r\nexport type Suggestion = {\r\n    mappedSuggestion: MappedSuggestion;\r\n    /* The information in a `MappedSuggestion` is sufficient to generate a query for the autocomplete\r\n    component but more information is required to allow manipulation of the correct part of the DOM\r\n    when selecting an option from the autocomplete. These three pieces of information allow us to\r\n    do that.\r\n    */\r\n    node: Node;\r\n    startOffset: number;\r\n    endOffset: number;\r\n};\r\ntype SuggestionState = Suggestion | null;\r\n\r\n/**\r\n * React hook to allow tracking and replacing of mentions and commands in a div element\r\n *\r\n * @param editorRef - a ref to the div that is the composer textbox\r\n * @param setText - setter function to set the content of the composer\r\n * @param isAutoReplaceEmojiEnabled - whether plain text emoticons should be auto replaced with emojis\r\n * @returns\r\n * - `handleMention`: a function that will insert @ or # mentions which are selected from\r\n * the autocomplete into the composer, given an href, the text to display, and any additional attributes\r\n * - `handleCommand`: a function that will replace the content of the composer with the given replacement text.\r\n * Can be used to process autocomplete of slash commands\r\n * - `onSelect`: a selection change listener to be attached to the plain text composer\r\n * - `suggestion`: if the cursor is inside something that could be interpreted as a command or a mention,\r\n * this will be an object representing that command or mention, otherwise it is null\r\n */\r\nexport function useSuggestion(\r\n    editorRef: React.RefObject<HTMLDivElement | null>,\r\n    setText: (text?: string) => void,\r\n    isAutoReplaceEmojiEnabled?: boolean,\r\n): {\r\n    handleMention: (href: string, displayName: string, attributes: AllowedMentionAttributes) => void;\r\n    handleAtRoomMention: (attributes: AllowedMentionAttributes) => void;\r\n    handleCommand: (text: string) => void;\r\n    handleEmojiReplacement: () => void;\r\n    onSelect: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n    suggestion: MappedSuggestion | null;\r\n} {\r\n    const [suggestionData, setSuggestionData0] = useState<SuggestionState>(null);\r\n\r\n    // debug for https://github.com/vector-im/element-web/issues/26037\r\n    const setSuggestionData = (suggestionData: SetStateAction<SuggestionState>): void => {\r\n        // setState allows either the data itself or a callback which returns the data\r\n        logger.log(\r\n            `## 26037 ## wysiwyg useSuggestion hook setting suggestion data to ${\r\n                suggestionData === null || suggestionData instanceof Function\r\n                    ? suggestionData\r\n                    : suggestionData.mappedSuggestion.keyChar + suggestionData.mappedSuggestion.text\r\n            }`,\r\n        );\r\n        setSuggestionData0(suggestionData);\r\n    };\r\n\r\n    // We create a `selectionchange` handler here because we need to know when the user has moved the cursor,\r\n    // we can not depend on input events only\r\n    const onSelect = (): void => processSelectionChange(editorRef, setSuggestionData, isAutoReplaceEmojiEnabled);\r\n\r\n    const handleMention = (href: string, displayName: string, attributes: AllowedMentionAttributes): void =>\r\n        processMention(href, displayName, attributes, suggestionData, setSuggestionData, setText);\r\n\r\n    const handleAtRoomMention = (attributes: AllowedMentionAttributes): void =>\r\n        processMention(\"#\", \"@room\", attributes, suggestionData, setSuggestionData, setText);\r\n\r\n    const handleCommand = (replacementText: string): void =>\r\n        processCommand(replacementText, suggestionData, setSuggestionData, setText);\r\n\r\n    const handleEmojiReplacement = (): void => processEmojiReplacement(suggestionData, setSuggestionData, setText);\r\n\r\n    return {\r\n        suggestion: suggestionData?.mappedSuggestion ?? null,\r\n        handleCommand,\r\n        handleMention,\r\n        handleAtRoomMention,\r\n        handleEmojiReplacement,\r\n        onSelect,\r\n    };\r\n}\r\n\r\n/**\r\n * When the selection changes inside the current editor, check to see if the cursor is inside\r\n * something that could be a command or a mention and update the suggestion state if so\r\n *\r\n * @param editorRef - ref to the composer\r\n * @param setSuggestionData - the setter for the suggestion state\r\n * @param isAutoReplaceEmojiEnabled - whether plain text emoticons should be auto replaced with emojis\r\n */\r\nexport function processSelectionChange(\r\n    editorRef: React.RefObject<HTMLDivElement | null>,\r\n    setSuggestionData: React.Dispatch<React.SetStateAction<SuggestionState>>,\r\n    isAutoReplaceEmojiEnabled?: boolean,\r\n): void {\r\n    const selection = document.getSelection();\r\n\r\n    // return early if we do not have a current editor ref with a cursor selection inside a text node\r\n    if (\r\n        editorRef.current === null ||\r\n        selection === null ||\r\n        !selection.isCollapsed ||\r\n        selection.anchorNode?.nodeName !== \"#text\"\r\n    ) {\r\n        setSuggestionData(null);\r\n        return;\r\n    }\r\n\r\n    // from here onwards we have a cursor inside a text node\r\n    const { anchorNode: currentNode, anchorOffset: currentOffset } = selection;\r\n\r\n    // if we have no text content, return, clearing the suggestion state\r\n    if (currentNode.textContent === null) {\r\n        setSuggestionData(null);\r\n        return;\r\n    }\r\n\r\n    const firstTextNode = document.createNodeIterator(editorRef.current, NodeFilter.SHOW_TEXT).nextNode();\r\n    const isFirstTextNode = currentNode === firstTextNode;\r\n    const foundSuggestion = findSuggestionInText(\r\n        currentNode.textContent,\r\n        currentOffset,\r\n        isFirstTextNode,\r\n        isAutoReplaceEmojiEnabled,\r\n    );\r\n\r\n    // if we have not found a suggestion, return, clearing the suggestion state\r\n    if (foundSuggestion === null) {\r\n        setSuggestionData(null);\r\n        return;\r\n    }\r\n\r\n    setSuggestionData({\r\n        mappedSuggestion: foundSuggestion.mappedSuggestion,\r\n        node: currentNode,\r\n        startOffset: foundSuggestion.startOffset,\r\n        endOffset: foundSuggestion.endOffset,\r\n    });\r\n}\r\n\r\n/**\r\n * Replaces the relevant part of the editor text with a link representing a mention after it\r\n * is selected from the autocomplete.\r\n *\r\n * @param href - the href that the inserted link will use\r\n * @param displayName - the text content of the link\r\n * @param attributes - additional attributes to add to the link, can include data-* attributes\r\n * @param suggestionData - representation of the part of the DOM that will be replaced\r\n * @param setSuggestionData - setter function to set the suggestion state\r\n * @param setText - setter function to set the content of the composer\r\n */\r\nexport function processMention(\r\n    href: string,\r\n    displayName: string,\r\n    attributes: AllowedMentionAttributes, // these will be used when formatting the link as a pill\r\n    suggestionData: SuggestionState,\r\n    setSuggestionData: React.Dispatch<React.SetStateAction<SuggestionState>>,\r\n    setText: (text?: string) => void,\r\n): void {\r\n    // if we do not have a suggestion, return early\r\n    if (suggestionData === null) {\r\n        return;\r\n    }\r\n\r\n    const { node } = suggestionData;\r\n\r\n    // create an <a> element with the required attributes to allow us to interpret the mention as being a pill\r\n    const linkElement = document.createElement(\"a\");\r\n    const linkTextNode = document.createTextNode(displayName);\r\n    linkElement.setAttribute(\"href\", href);\r\n    linkElement.setAttribute(\"contenteditable\", \"false\");\r\n\r\n    for (const [attr, value] of attributes.entries()) {\r\n        linkElement.setAttribute(attr, value);\r\n    }\r\n\r\n    linkElement.appendChild(linkTextNode);\r\n\r\n    // create text nodes to go before and after the link\r\n    const leadingTextNode = document.createTextNode(node.textContent?.slice(0, suggestionData.startOffset) || \"\\u200b\");\r\n    const trailingTextNode = document.createTextNode(` ${node.textContent?.slice(suggestionData.endOffset) ?? \"\"}`);\r\n\r\n    // now add the leading text node, link element and trailing text node before removing the node we are replacing\r\n    const parentNode = node.parentNode;\r\n    if (isNotNull(parentNode)) {\r\n        parentNode.insertBefore(leadingTextNode, node);\r\n        parentNode.insertBefore(linkElement, node);\r\n        parentNode.insertBefore(trailingTextNode, node);\r\n        parentNode.removeChild(node);\r\n    }\r\n\r\n    // move the selection to the trailing text node\r\n    document.getSelection()?.setBaseAndExtent(trailingTextNode, 1, trailingTextNode, 1);\r\n\r\n    // set the text content to be the innerHTML of the current editor ref and clear the suggestion state\r\n    setText();\r\n    setSuggestionData(null);\r\n}\r\n\r\n/**\r\n * Replaces the relevant part of the editor text with the replacement text after a command is selected\r\n * from the autocomplete.\r\n *\r\n * @param replacementText - the text that we will insert into the DOM\r\n * @param suggestionData - representation of the part of the DOM that will be replaced\r\n * @param setSuggestionData - setter function to set the suggestion state\r\n * @param setText - setter function to set the content of the composer\r\n */\r\nexport function processCommand(\r\n    replacementText: string,\r\n    suggestionData: SuggestionState,\r\n    setSuggestionData: React.Dispatch<React.SetStateAction<SuggestionState>>,\r\n    setText: (text?: string) => void,\r\n): void {\r\n    // if we do not have a suggestion, return early\r\n    if (suggestionData === null) {\r\n        return;\r\n    }\r\n\r\n    const { node } = suggestionData;\r\n\r\n    // for a command, we know we start at the beginning of the text node, so build the replacement\r\n    // string (note trailing space) and manually adjust the node's textcontent\r\n    const newContent = `${replacementText} `;\r\n    node.textContent = newContent;\r\n\r\n    // then set the cursor to the end of the node, update the `content` state in the usePlainTextListeners\r\n    // hook and clear the suggestion from state\r\n    document.getSelection()?.setBaseAndExtent(node, newContent.length, node, newContent.length);\r\n    setText(newContent);\r\n    setSuggestionData(null);\r\n}\r\n\r\n/**\r\n * Replaces the relevant part of the editor text, replacing the plain text emoitcon with the suggested emoji.\r\n *\r\n * @param suggestionData - representation of the part of the DOM that will be replaced\r\n * @param setSuggestionData - setter function to set the suggestion state\r\n * @param setText - setter function to set the content of the composer\r\n */\r\nexport function processEmojiReplacement(\r\n    suggestionData: SuggestionState,\r\n    setSuggestionData: React.Dispatch<React.SetStateAction<SuggestionState>>,\r\n    setText: (text?: string) => void,\r\n): void {\r\n    // if we do not have a suggestion of the correct type, return early\r\n    if (suggestionData === null || suggestionData.mappedSuggestion.type !== `custom`) {\r\n        return;\r\n    }\r\n    const { node, mappedSuggestion } = suggestionData;\r\n    const existingContent = node.textContent;\r\n\r\n    if (existingContent == null) {\r\n        return;\r\n    }\r\n\r\n    // replace the emoticon with the suggesed emoji\r\n    const newContent =\r\n        existingContent.slice(0, suggestionData.startOffset) +\r\n        mappedSuggestion.text +\r\n        existingContent.slice(suggestionData.endOffset);\r\n\r\n    node.textContent = newContent;\r\n\r\n    document.getSelection()?.setBaseAndExtent(node, newContent.length, node, newContent.length);\r\n    setText(newContent);\r\n    setSuggestionData(null);\r\n}\r\n\r\n/**\r\n * Given some text content from a node and the cursor position, find the word that the cursor is currently inside\r\n * and then test that word to see if it is a suggestion. Return the `MappedSuggestion` with start and end offsets if\r\n * the cursor is inside a valid suggestion, null otherwise.\r\n *\r\n * @param text - the text content of a node\r\n * @param offset - the current cursor offset position within the node\r\n * @param isFirstTextNode - whether or not the node is the first text node in the editor. Used to determine\r\n * if a command suggestion is found or not\r\n * @param isAutoReplaceEmojiEnabled - whether plain text emoticons should be auto replaced with emojis\r\n * @returns the `MappedSuggestion` along with its start and end offsets if found, otherwise null\r\n */\r\nexport function findSuggestionInText(\r\n    text: string,\r\n    offset: number,\r\n    isFirstTextNode: boolean,\r\n    isAutoReplaceEmojiEnabled?: boolean,\r\n): { mappedSuggestion: MappedSuggestion; startOffset: number; endOffset: number } | null {\r\n    // Return null early if the offset is outside the content\r\n    if (offset < 0 || offset > text.length) {\r\n        return null;\r\n    }\r\n\r\n    // Variables to keep track of the indices we will be slicing from and to in order to create\r\n    // a substring of the word that the cursor is currently inside\r\n    let startSliceIndex = offset;\r\n    let endSliceIndex = offset;\r\n\r\n    // Search backwards from the current cursor position to find the start index of the word\r\n    // containing the cursor\r\n    while (shouldDecrementStartIndex(text, startSliceIndex)) {\r\n        startSliceIndex--;\r\n    }\r\n\r\n    // Search forwards from the current cursor position to find the end index of the word\r\n    // containing the cursor\r\n    while (shouldIncrementEndIndex(text, endSliceIndex)) {\r\n        endSliceIndex++;\r\n    }\r\n\r\n    // Get the word at the cursor then check if it contains a suggestion or not\r\n    const wordAtCursor = text.slice(startSliceIndex, endSliceIndex);\r\n    const mappedSuggestion = getMappedSuggestion(wordAtCursor, isAutoReplaceEmojiEnabled);\r\n\r\n    /**\r\n     * If we have a word that could be a command, it is not a valid command if:\r\n     * - the node we're looking at isn't the first text node in the editor (adding paragraphs can\r\n     *   result in nested <p> tags inside the editor <div>)\r\n     * - the starting index is anything other than 0 (they can only appear at the start of a message)\r\n     * - there is more text following the command (eg `/spo asdf|` should not be interpreted as\r\n     *   something requiring autocomplete)\r\n     */\r\n    if (\r\n        mappedSuggestion === null ||\r\n        (mappedSuggestion.type === \"command\" &&\r\n            (!isFirstTextNode || startSliceIndex !== 0 || endSliceIndex !== text.length))\r\n    ) {\r\n        return null;\r\n    }\r\n\r\n    return { mappedSuggestion, startOffset: startSliceIndex, endOffset: startSliceIndex + wordAtCursor.length };\r\n}\r\n\r\n/**\r\n * Associated function for findSuggestionInText. Checks the character at the preceding index\r\n * to determine if the search loop should continue.\r\n *\r\n * @param text - text content to check for mentions or commands\r\n * @param index - the current index to check\r\n * @returns true if check should keep moving backwards, false otherwise\r\n */\r\nfunction shouldDecrementStartIndex(text: string, index: number): boolean {\r\n    // If the index is at or outside the beginning of the string, return false\r\n    if (index <= 0) return false;\r\n\r\n    // We are inside the string so can guarantee that there is a preceding character\r\n    // Keep searching backwards if the preceding character is not a space\r\n    return !/\\s/.test(text[index - 1]);\r\n}\r\n\r\n/**\r\n * Associated function for findSuggestionInText. Checks the character at the current index\r\n * to determine if the search loop should continue.\r\n *\r\n * @param text - text content to check for mentions or commands\r\n * @param index - the current index to check\r\n * @returns true if check should keep moving forwards, false otherwise\r\n */\r\nfunction shouldIncrementEndIndex(text: string, index: number): boolean {\r\n    // If the index is at or outside the end of the string, return false\r\n    if (index >= text.length) return false;\r\n\r\n    // Keep searching forwards if the current character is not a space\r\n    return !/\\s/.test(text[index]);\r\n}\r\n\r\n/**\r\n * Given a string, return a `MappedSuggestion` if the string contains a suggestion. Otherwise return null.\r\n *\r\n * @param text - string to check for a suggestion\r\n * @param isAutoReplaceEmojiEnabled - whether plain text emoticons should be auto replaced with emojis\r\n * @returns a `MappedSuggestion` if a suggestion is present, null otherwise\r\n */\r\nexport function getMappedSuggestion(text: string, isAutoReplaceEmojiEnabled?: boolean): MappedSuggestion | null {\r\n    if (isAutoReplaceEmojiEnabled) {\r\n        // variations of plaintext emoitcons(E.g. :P vs :p vs :-P) are handled upstream by the emojibase-bindings/emojibase libraries.\r\n        // See rules for variations here https://github.com/milesj/emojibase/blob/master/packages/core/src/generateEmoticonPermutations.ts#L3-L32\r\n        const emoji = EMOTICON_TO_EMOJI.get(text);\r\n        if (emoji?.unicode) {\r\n            return { keyChar: \"\", text: emoji.unicode, type: \"custom\" };\r\n        }\r\n    }\r\n\r\n    const firstChar = text.charAt(0);\r\n    const restOfString = text.slice(1);\r\n\r\n    switch (firstChar) {\r\n        case \"/\":\r\n            return { keyChar: firstChar, text: restOfString, type: \"command\" };\r\n        case \"#\":\r\n        case \"@\":\r\n            return { keyChar: firstChar, text: restOfString, type: \"mention\" };\r\n        default:\r\n            return null;\r\n    }\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type KeyboardEvent, type RefObject, type SyntheticEvent, useCallback, useRef, useState } from \"react\";\r\nimport { type AllowedMentionAttributes, type MappedSuggestion } from \"@vector-im/matrix-wysiwyg\";\r\nimport { type IEventRelation } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { useSettingValue } from \"../../../../../hooks/useSettings\";\r\nimport { IS_MAC, Key } from \"../../../../../Keyboard\";\r\nimport type Autocomplete from \"../../Autocomplete\";\r\nimport { handleClipboardEvent, handleEventWithAutocomplete, isEventToHandleAsClipboardEvent } from \"./utils\";\r\nimport { useSuggestion } from \"./useSuggestion\";\r\nimport { isNotNull, isNotUndefined } from \"../../../../../Typeguards\";\r\nimport { useMatrixClientContext } from \"../../../../../contexts/MatrixClientContext\";\r\nimport { useScopedRoomContext } from \"../../../../../contexts/ScopedRoomContext.tsx\";\r\n\r\nfunction isDivElement(target: EventTarget): target is HTMLDivElement {\r\n    return target instanceof HTMLDivElement;\r\n}\r\n\r\n/**\r\n * React hook which generates all of the listeners and the ref to be attached to the editor.\r\n *\r\n * Also returns pieces of state and utility functions that are required for use in other hooks\r\n * and by the autocomplete component.\r\n *\r\n * @param initialContent - the content of the editor when it is first mounted\r\n * @param onChange - called whenever there is change in the editor content\r\n * @param onSend - called whenever the user sends the message\r\n * @param eventRelation - used to send the event to the correct place eg timeline vs thread\r\n * @param isAutoReplaceEmojiEnabled - whether plain text emoticons should be auto replaced with emojis\r\n * @returns\r\n * - `ref`: a ref object which the caller must attach to the HTML `div` node for the editor\r\n * * `autocompleteRef`: a ref object which the caller must attach to the autocomplete component\r\n * - `content`: state representing the editor's current text content\r\n * - `setContent`: the setter function for `content`\r\n * - `onInput`, `onPaste`, `onKeyDown`: handlers for input, paste and keyDown events\r\n * - the output from the {@link useSuggestion} hook\r\n */\r\nexport function usePlainTextListeners(\r\n    initialContent?: string,\r\n    onChange?: (content: string) => void,\r\n    onSend?: () => void,\r\n    eventRelation?: IEventRelation,\r\n    isAutoReplaceEmojiEnabled?: boolean,\r\n): {\r\n    ref: RefObject<HTMLDivElement | null>;\r\n    autocompleteRef: RefObject<Autocomplete | null>;\r\n    content?: string;\r\n    onBeforeInput(event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>): void;\r\n    onInput(event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>): void;\r\n    onPaste(event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>): void;\r\n    onKeyDown(event: KeyboardEvent<HTMLDivElement>): void;\r\n    setContent(text?: string): void;\r\n    handleMention: (link: string, text: string, attributes: AllowedMentionAttributes) => void;\r\n    handleAtRoomMention: (attributes: AllowedMentionAttributes) => void;\r\n    handleCommand: (text: string) => void;\r\n    onSelect: (event: SyntheticEvent<HTMLDivElement>) => void;\r\n    suggestion: MappedSuggestion | null;\r\n} {\r\n    const roomContext = useScopedRoomContext(\"room\", \"timelineRenderingType\", \"replyToEvent\");\r\n    const mxClient = useMatrixClientContext();\r\n\r\n    const ref = useRef<HTMLDivElement>(null);\r\n    const autocompleteRef = useRef<Autocomplete>(null);\r\n    const [content, setContent] = useState<string | undefined>(initialContent);\r\n\r\n    const send = useCallback(() => {\r\n        if (ref.current) {\r\n            ref.current.innerHTML = \"\";\r\n        }\r\n        onSend?.();\r\n    }, [ref, onSend]);\r\n\r\n    const setText = useCallback(\r\n        (text?: string) => {\r\n            if (isNotUndefined(text)) {\r\n                setContent(text);\r\n                onChange?.(text);\r\n            } else if (isNotNull(ref) && isNotNull(ref.current)) {\r\n                // if called with no argument, read the current innerHTML from the ref and amend it as per `onInput`\r\n                const currentRefContent = ref.current.innerHTML;\r\n                setContent(currentRefContent);\r\n                onChange?.(currentRefContent);\r\n            }\r\n        },\r\n        [onChange, ref],\r\n    );\r\n\r\n    // For separation of concerns, the suggestion handling is kept in a separate hook but is\r\n    // nested here because we do need to be able to update the `content` state in this hook\r\n    // when a user selects a suggestion from the autocomplete menu\r\n    const { suggestion, onSelect, handleCommand, handleMention, handleAtRoomMention, handleEmojiReplacement } =\r\n        useSuggestion(ref, setText, isAutoReplaceEmojiEnabled);\r\n\r\n    const onInput = useCallback(\r\n        (event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>) => {\r\n            if (isDivElement(event.target)) {\r\n                setText(event.target.innerHTML);\r\n            }\r\n        },\r\n        [setText],\r\n    );\r\n\r\n    const onPaste = useCallback(\r\n        (event: SyntheticEvent<HTMLDivElement, InputEvent | ClipboardEvent>) => {\r\n            const { nativeEvent } = event;\r\n            let imagePasteWasHandled = false;\r\n\r\n            if (isEventToHandleAsClipboardEvent(nativeEvent)) {\r\n                const data =\r\n                    nativeEvent instanceof ClipboardEvent ? nativeEvent.clipboardData : nativeEvent.dataTransfer;\r\n                imagePasteWasHandled = handleClipboardEvent(nativeEvent, data, roomContext, mxClient, eventRelation);\r\n            }\r\n\r\n            // prevent default behaviour and skip call to onInput if the image paste event was handled\r\n            if (imagePasteWasHandled) {\r\n                event.preventDefault();\r\n            } else {\r\n                onInput(event);\r\n            }\r\n        },\r\n        [eventRelation, mxClient, onInput, roomContext],\r\n    );\r\n\r\n    const enterShouldSend = !useSettingValue(\"MessageComposerInput.ctrlEnterToSend\");\r\n    const onKeyDown = useCallback(\r\n        (event: KeyboardEvent<HTMLDivElement>) => {\r\n            // we need autocomplete to take priority when it is open for using enter to select\r\n            const isHandledByAutocomplete = handleEventWithAutocomplete(autocompleteRef, event);\r\n            if (isHandledByAutocomplete) {\r\n                return;\r\n            }\r\n            // handle accepting of plain text emojicon to emoji replacement\r\n            if (event.key == Key.ENTER || event.key == Key.SPACE) {\r\n                handleEmojiReplacement();\r\n            }\r\n\r\n            // resume regular flow\r\n            if (event.key === Key.ENTER) {\r\n                // TODO use getKeyBindingsManager().getMessageComposerAction(event) like in useInputEventProcessor\r\n                const sendModifierIsPressed = IS_MAC ? event.metaKey : event.ctrlKey;\r\n\r\n                // if enter should send, send if the user is not pushing shift\r\n                if (enterShouldSend && !event.shiftKey) {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    send();\r\n                }\r\n\r\n                // if enter should not send, send only if the user is pushing ctrl/cmd\r\n                if (!enterShouldSend && sendModifierIsPressed) {\r\n                    event.preventDefault();\r\n                    event.stopPropagation();\r\n                    send();\r\n                }\r\n            }\r\n        },\r\n        [autocompleteRef, enterShouldSend, send, handleEmojiReplacement],\r\n    );\r\n\r\n    return {\r\n        ref,\r\n        autocompleteRef,\r\n        onBeforeInput: onPaste,\r\n        onInput,\r\n        onPaste,\r\n        onKeyDown,\r\n        content,\r\n        setContent: setText,\r\n        suggestion,\r\n        onSelect,\r\n        handleCommand,\r\n        handleMention,\r\n        handleAtRoomMention,\r\n    };\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport classNames from \"classnames\";\r\nimport { type IEventRelation } from \"matrix-js-sdk/src/matrix\";\r\nimport React, { type JSX, type RefObject, type ReactNode } from \"react\";\r\n\r\nimport { useComposerFunctions } from \"../hooks/useComposerFunctions\";\r\nimport { useIsFocused } from \"../hooks/useIsFocused\";\r\nimport { usePlainTextInitialization } from \"../hooks/usePlainTextInitialization\";\r\nimport { usePlainTextListeners } from \"../hooks/usePlainTextListeners\";\r\nimport { useSetCursorPosition } from \"../hooks/useSetCursorPosition\";\r\nimport { type ComposerFunctions } from \"../types\";\r\nimport { Editor } from \"./Editor\";\r\nimport { WysiwygAutocomplete } from \"./WysiwygAutocomplete\";\r\nimport { useSettingValue } from \"../../../../../hooks/useSettings\";\r\n\r\ninterface PlainTextComposerProps {\r\n    disabled?: boolean;\r\n    onChange?: (content: string) => void;\r\n    onSend?: () => void;\r\n    placeholder?: string;\r\n    initialContent?: string;\r\n    className?: string;\r\n    leftComponent?: ReactNode;\r\n    rightComponent?: ReactNode;\r\n    children?: (ref: RefObject<HTMLDivElement | null>, composerFunctions: ComposerFunctions) => ReactNode;\r\n    eventRelation?: IEventRelation;\r\n}\r\n\r\nexport function PlainTextComposer({\r\n    className,\r\n    disabled = false,\r\n    onSend,\r\n    onChange,\r\n    children,\r\n    placeholder,\r\n    initialContent,\r\n    leftComponent,\r\n    rightComponent,\r\n    eventRelation,\r\n}: PlainTextComposerProps): JSX.Element {\r\n    const isAutoReplaceEmojiEnabled = useSettingValue(\"MessageComposerInput.autoReplaceEmoji\");\r\n    const {\r\n        ref: editorRef,\r\n        autocompleteRef,\r\n        onBeforeInput,\r\n        onInput,\r\n        onPaste,\r\n        onKeyDown,\r\n        content,\r\n        setContent,\r\n        suggestion,\r\n        onSelect,\r\n        handleCommand,\r\n        handleMention,\r\n        handleAtRoomMention,\r\n    } = usePlainTextListeners(initialContent, onChange, onSend, eventRelation, isAutoReplaceEmojiEnabled);\r\n    const composerFunctions = useComposerFunctions(editorRef, setContent);\r\n    usePlainTextInitialization(initialContent, editorRef);\r\n    useSetCursorPosition(disabled, editorRef);\r\n    const { isFocused, onFocus } = useIsFocused();\r\n    const computedPlaceholder = (!content && placeholder) || undefined;\r\n    return (\r\n        <div\r\n            data-testid=\"PlainTextComposer\"\r\n            className={classNames(className, { [`${className}-focused`]: isFocused })}\r\n            onFocus={onFocus}\r\n            onBlur={onFocus}\r\n            onBeforeInput={onBeforeInput}\r\n            onInput={onInput}\r\n            onPaste={onPaste}\r\n            onKeyDown={onKeyDown}\r\n            onSelect={onSelect}\r\n        >\r\n            <WysiwygAutocomplete\r\n                ref={autocompleteRef}\r\n                suggestion={suggestion}\r\n                handleMention={handleMention}\r\n                handleCommand={handleCommand}\r\n                handleAtRoomMention={handleAtRoomMention}\r\n            />\r\n            <Editor\r\n                ref={editorRef}\r\n                disabled={disabled}\r\n                leftComponent={leftComponent}\r\n                rightComponent={rightComponent}\r\n                placeholder={computedPlaceholder}\r\n            />\r\n            {children?.(editorRef, composerFunctions)}\r\n        </div>\r\n    );\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type RefObject, useMemo } from \"react\";\r\n\r\nimport { setSelection } from \"../utils/selection\";\r\n\r\nexport function useComposerFunctions(\r\n    ref: RefObject<HTMLDivElement | null>,\r\n    setContent: (content: string) => void,\r\n): {\r\n    clear(): void;\r\n    insertText(text: string): void;\r\n} {\r\n    return useMemo(\r\n        () => ({\r\n            clear: () => {\r\n                if (ref.current) {\r\n                    // eslint-disable-next-line react-compiler/react-compiler\r\n                    ref.current.innerHTML = \"\";\r\n                }\r\n            },\r\n            insertText: (text: string) => {\r\n                const selection = document.getSelection();\r\n\r\n                if (ref.current && selection) {\r\n                    const content = ref.current.innerHTML;\r\n                    const { anchorOffset, focusOffset } = selection;\r\n                    ref.current.innerHTML = `${content.slice(0, anchorOffset)}${text}${content.slice(focusOffset)}`;\r\n                    setSelection({\r\n                        anchorNode: ref.current.firstChild,\r\n                        anchorOffset: anchorOffset + text.length,\r\n                        focusNode: ref.current.firstChild,\r\n                        focusOffset: focusOffset + text.length,\r\n                        isForward: true,\r\n                    });\r\n                    setContent(ref.current.innerHTML);\r\n                }\r\n            },\r\n        }),\r\n        [ref, setContent],\r\n    );\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type RefObject, useEffect } from \"react\";\r\n\r\nexport function usePlainTextInitialization(initialContent = \"\", ref: RefObject<HTMLElement | null>): void {\r\n    useEffect(() => {\r\n        // always read and write the ref.current using .innerHTML for consistency in linebreak and HTML entity handling\r\n        if (ref.current) {\r\n            // eslint-disable-next-line react-compiler/react-compiler\r\n            ref.current.innerHTML = initialContent;\r\n        }\r\n    }, [ref, initialContent]);\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX } from \"react\";\r\n\r\nimport { type MenuProps } from \"../../../../structures/ContextMenu\";\r\nimport { EmojiButton } from \"../../EmojiButton\";\r\nimport dis from \"../../../../../dispatcher/dispatcher\";\r\nimport { type ComposerInsertPayload } from \"../../../../../dispatcher/payloads/ComposerInsertPayload\";\r\nimport { Action } from \"../../../../../dispatcher/actions\";\r\nimport { useScopedRoomContext } from \"../../../../../contexts/ScopedRoomContext.tsx\";\r\n\r\ninterface EmojiProps {\r\n    menuPosition: MenuProps;\r\n}\r\n\r\nexport function Emoji({ menuPosition }: EmojiProps): JSX.Element {\r\n    const roomContext = useScopedRoomContext(\"timelineRenderingType\");\r\n\r\n    return (\r\n        <EmojiButton\r\n            menuPosition={menuPosition}\r\n            addEmoji={(emoji) => {\r\n                dis.dispatch<ComposerInsertPayload>({\r\n                    action: Action.ComposerInsert,\r\n                    text: emoji,\r\n                    timelineRenderingType: roomContext.timelineRenderingType,\r\n                });\r\n                return true;\r\n            }}\r\n        />\r\n    );\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX, type RefObject, useMemo, type ReactNode } from \"react\";\r\nimport { type IEventRelation } from \"matrix-js-sdk/src/matrix\";\r\nimport LockOffIcon from \"@vector-im/compound-design-tokens/assets/web/icons/lock-off\";\r\n\r\nimport { useWysiwygSendActionHandler } from \"./hooks/useWysiwygSendActionHandler\";\r\nimport { WysiwygComposer } from \"./components/WysiwygComposer\";\r\nimport { PlainTextComposer } from \"./components/PlainTextComposer\";\r\nimport { type ComposerFunctions } from \"./types\";\r\nimport { E2EStatus } from \"../../../../utils/ShieldUtils\";\r\nimport E2EIcon from \"../E2EIcon\";\r\nimport { type MenuProps } from \"../../../structures/ContextMenu\";\r\nimport { Emoji } from \"./components/Emoji\";\r\nimport { ComposerContext, getDefaultContextValue } from \"./ComposerContext\";\r\n\r\ninterface ContentProps {\r\n    disabled?: boolean;\r\n    composerFunctions: ComposerFunctions;\r\n    ref?: RefObject<HTMLElement | null>;\r\n}\r\n\r\nconst Content = function Content({ disabled = false, composerFunctions, ref }: ContentProps): ReactNode {\r\n    useWysiwygSendActionHandler(disabled, ref, composerFunctions);\r\n    return null;\r\n};\r\n\r\nexport interface SendWysiwygComposerProps {\r\n    initialContent?: string;\r\n    isRichTextEnabled: boolean;\r\n    placeholder?: string;\r\n    disabled?: boolean;\r\n    e2eStatus?: E2EStatus;\r\n    onChange: (content: string) => void;\r\n    onSend: () => void;\r\n    menuPosition: MenuProps;\r\n    eventRelation?: IEventRelation;\r\n}\r\n\r\n// Default needed for React.lazy\r\nexport default function SendWysiwygComposer({\r\n    isRichTextEnabled,\r\n    e2eStatus,\r\n    menuPosition,\r\n    ...props\r\n}: SendWysiwygComposerProps): JSX.Element {\r\n    const Composer = isRichTextEnabled ? WysiwygComposer : PlainTextComposer;\r\n    const defaultContextValue = useMemo(\r\n        () => getDefaultContextValue({ eventRelation: props.eventRelation }),\r\n        [props.eventRelation],\r\n    );\r\n\r\n    let leftIcon: false | JSX.Element = false;\r\n    if (!e2eStatus) {\r\n        leftIcon = (\r\n            <LockOffIcon\r\n                data-testid=\"e2e-icon\"\r\n                width={12}\r\n                height={12}\r\n                color=\"var(--cpd-color-icon-info-primary)\"\r\n                className=\"mx_E2EIcon\"\r\n            />\r\n        );\r\n    } else if (e2eStatus !== E2EStatus.Normal) {\r\n        leftIcon = <E2EIcon status={e2eStatus} />;\r\n    }\r\n    return (\r\n        <ComposerContext.Provider value={defaultContextValue}>\r\n            <Composer\r\n                className=\"mx_SendWysiwygComposer\"\r\n                leftComponent={leftIcon}\r\n                rightComponent={<Emoji menuPosition={menuPosition} />}\r\n                {...props}\r\n            >\r\n                {(ref, composerFunctions) => (\r\n                    <Content disabled={props.disabled} ref={ref} composerFunctions={composerFunctions} />\r\n                )}\r\n            </Composer>\r\n        </ComposerContext.Provider>\r\n    );\r\n}\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\nCopyright 2022 The Matrix.org Foundation C.I.C.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport { type RefObject, useCallback, useRef } from \"react\";\r\n\r\nimport defaultDispatcher from \"../../../../../dispatcher/dispatcher\";\r\nimport { Action } from \"../../../../../dispatcher/actions\";\r\nimport { type ActionPayload } from \"../../../../../dispatcher/payloads\";\r\nimport { TimelineRenderingType } from \"../../../../../contexts/RoomContext\";\r\nimport { useDispatcher } from \"../../../../../hooks/useDispatcher\";\r\nimport { focusComposer } from \"./utils\";\r\nimport { type ComposerFunctions } from \"../types\";\r\nimport { ComposerType } from \"../../../../../dispatcher/payloads/ComposerInsertPayload\";\r\nimport { useComposerContext } from \"../ComposerContext\";\r\nimport { setSelection } from \"../utils/selection\";\r\nimport { useScopedRoomContext } from \"../../../../../contexts/ScopedRoomContext.tsx\";\r\n\r\nexport function useWysiwygSendActionHandler(\r\n    disabled: boolean,\r\n    composerElement: RefObject<HTMLElement | null> | undefined,\r\n    composerFunctions: ComposerFunctions,\r\n): void {\r\n    const roomContext = useScopedRoomContext(\"timelineRenderingType\");\r\n    const composerContext = useComposerContext();\r\n    const timeoutId = useRef<number | null>(null);\r\n\r\n    const handler = useCallback(\r\n        (payload: ActionPayload) => {\r\n            // don't let the user into the composer if it is disabled - all of these branches lead\r\n            // to the cursor being in the composer\r\n            if (disabled || !composerElement?.current) return;\r\n\r\n            const context = payload.context ?? TimelineRenderingType.Room;\r\n\r\n            switch (payload.action) {\r\n                case \"reply_to_event\":\r\n                case Action.FocusAComposer:\r\n                case Action.FocusSendMessageComposer:\r\n                    focusComposer(composerElement, context, roomContext, timeoutId);\r\n                    break;\r\n                case Action.ClearAndFocusSendMessageComposer:\r\n                    // When a thread is opened, prevent the main composer to steal the thread composer focus\r\n                    if (payload.timelineRenderingType !== roomContext.timelineRenderingType) break;\r\n\r\n                    composerFunctions.clear();\r\n                    focusComposer(composerElement, context, roomContext, timeoutId);\r\n                    break;\r\n                case Action.ComposerInsert:\r\n                    if (payload.timelineRenderingType !== roomContext.timelineRenderingType) break;\r\n                    if (payload.composerType !== ComposerType.Send) break;\r\n\r\n                    if (payload.userId) {\r\n                        // TODO insert mention - see SendMessageComposer\r\n                    } else if (payload.event) {\r\n                        // TODO insert quote message - see SendMessageComposer\r\n                    } else if (payload.text) {\r\n                        setSelection(composerContext.selection).then(() => composerFunctions.insertText(payload.text));\r\n                    }\r\n                    break;\r\n            }\r\n        },\r\n        [disabled, composerElement, roomContext, composerFunctions, composerContext],\r\n    );\r\n\r\n    useDispatcher(defaultDispatcher, handler);\r\n}\r\n"],"names":["LockOffIcon","props","ref","xmlns","width","height","fill","viewBox","children","d","displayName","forwardRef","CollapsibleButton","_ref","title","className","iconClassName","inputRef","_objectWithoutProperties","_excluded","useContext","OverflowMenuContext","React","IconizedContextMenuOption","_extends","label","AccessibleButton","classNames","EmojiButton","addEmoji","menuPosition","overflowMenuCloser","menuDisplayed","button","openMenu","closeMenu","useContextMenu","contextMenu","current","position","aboveLeftOf","getBoundingClientRect","onFinished","ContextMenu","managed","EmojiPicker","onChoose","computedClassName","mx_EmojiButton_highlight","onClick","_t","createContext","emojiButton","key","uploadButton","UploadButton","UploadButtonContext","UploadButtonContextProvider","roomId","relation","cli","MatrixClientContext","roomContext","useScopedRoomContext","uploadInput","useRef","onUploadClick","_uploadInput$current","isGuest","dis","dispatch","action","click","useDispatcher","payload","timelineRenderingType","context","Provider","value","type","style","display","multiple","chromeFileInputFix","onChange","ev","_ev$target$files","target","files","length","ContentMessages","sharedInstance","sendContentListToRoom","Array","from","uploadButtonFn","showStickersButton","id","setStickerPickerOpen","isStickerPickerOpen","voiceRecordingButton","narrow","onRecordStartEndClick","pollButton","room","PollButton","constructor","args","_defineProperty","_this$context","this","call","currentState","maySendEvent","M_POLL_START","name","MatrixClientPeg","safeGet","getSafeUserId","_this$props$relation","threadId","rel_type","THREAD_RELATION_TYPE","event_id","undefined","Modal","createDialog","PollCreateDialog","ErrorDialog","description","render","_this$props$relation2","onCreateClick","showLocationButton","matrixClient","sender","getMember","LocationButton","ComposerModeButton","isRichTextEnabled","mx_MessageComposer_plain_text","mx_MessageComposer_rich_text","isWysiwygLabEnabled","useSettingValue","haveRecording","mainButtons","moreButtons","onComposerModeClick","showPollsButton","filterBoolean","moreOptionsClasses","mx_MessageComposer_button","mx_MessageComposer_buttonMenu","mx_MessageComposer_closeButtonMenu","isMenuOpen","toggleButtonMenu","IconizedContextMenu","wrapperClassName","compact","IconizedContextMenuOptionList","useSuggestion","editorRef","setText","isAutoReplaceEmojiEnabled","_suggestionData$mappe","suggestionData","setSuggestionData0","useState","setSuggestionData","logger","log","Function","mappedSuggestion","keyChar","text","suggestion","handleCommand","replacementText","_document$getSelectio2","node","newContent","textContent","document","getSelection","setBaseAndExtent","processCommand","handleMention","href","attributes","processMention","handleAtRoomMention","handleEmojiReplacement","_document$getSelectio3","existingContent","slice","startOffset","endOffset","processEmojiReplacement","onSelect","_selection$anchorNode","selection","isCollapsed","anchorNode","nodeName","currentNode","anchorOffset","currentOffset","firstTextNode","createNodeIterator","NodeFilter","SHOW_TEXT","nextNode","isFirstTextNode","foundSuggestion","offset","startSliceIndex","endSliceIndex","shouldDecrementStartIndex","shouldIncrementEndIndex","wordAtCursor","emoji","EMOTICON_TO_EMOJI","get","unicode","firstChar","charAt","restOfString","getMappedSuggestion","findSuggestionInText","processSelectionChange","_node$textContent","_node$textContent$sli","_node$textContent2","_document$getSelectio","linkElement","createElement","linkTextNode","createTextNode","setAttribute","attr","entries","appendChild","leadingTextNode","trailingTextNode","parentNode","isNotNull","insertBefore","removeChild","index","test","usePlainTextListeners","initialContent","onSend","eventRelation","mxClient","useMatrixClientContext","autocompleteRef","content","setContent","send","useCallback","innerHTML","isNotUndefined","currentRefContent","onInput","event","HTMLDivElement","onPaste","nativeEvent","imagePasteWasHandled","isEventToHandleAsClipboardEvent","data","ClipboardEvent","clipboardData","dataTransfer","handleClipboardEvent","preventDefault","enterShouldSend","onKeyDown","handleEventWithAutocomplete","Key","ENTER","SPACE","sendModifierIsPressed","IS_MAC","metaKey","ctrlKey","shiftKey","stopPropagation","onBeforeInput","PlainTextComposer","disabled","placeholder","leftComponent","rightComponent","composerFunctions","useMemo","clear","insertText","focusOffset","setSelection","firstChild","focusNode","isForward","useComposerFunctions","useEffect","usePlainTextInitialization","useSetCursorPosition","isFocused","onFocus","useIsFocused","computedPlaceholder","onBlur","WysiwygAutocomplete","Editor","Emoji","Action","ComposerInsert","Content","composerElement","composerContext","useComposerContext","timeoutId","handler","_payload$context","TimelineRenderingType","Room","FocusAComposer","FocusSendMessageComposer","focusComposer","ClearAndFocusSendMessageComposer","composerType","ComposerType","Send","userId","then","defaultDispatcher","useWysiwygSendActionHandler","SendWysiwygComposer","e2eStatus","Composer","WysiwygComposer","defaultContextValue","getDefaultContextValue","leftIcon","E2EStatus","Normal","E2EIcon","status","color","ComposerContext"],"sourceRoot":""}