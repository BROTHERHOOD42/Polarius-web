{"version":3,"file":"bundles/352b00c5a33c88ed2a7a/2656.js","mappings":"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","sources":["webpack://element-web/./src/components/views/dialogs/TransactionHistoryDialog.tsx"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { useState, useEffect, type JSX } from \"react\";\r\nimport { type Room } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport BaseDialog from \"./BaseDialog\";\r\nimport Spinner from \"../elements/Spinner\";\r\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\r\nimport SpaceStore from \"../../../stores/spaces/SpaceStore\";\r\n\r\ninterface Transaction {\r\n    type: string;\r\n    from: string;\r\n    to: string;\r\n    amount: number;\r\n    balance?: number;\r\n    senderBalance?: number;\r\n    recipientBalance?: number;\r\n    timestamp: number;\r\n    verifier: string;\r\n    verifierUserId: string;\r\n    txHash: string;\r\n    signature?: string;\r\n    eventId: string;\r\n}\r\n\r\ninterface IProps {\r\n    daoId: string;\r\n    daoName: string;\r\n    walletAddress: string;\r\n    onFinished(): void;\r\n}\r\n\r\nexport default function TransactionHistoryDialog(props: IProps): JSX.Element {\r\n    const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    const [error, setError] = useState<string | null>(null);\r\n\r\n    useEffect(() => {\r\n        loadTransactionHistory();\r\n    }, [props.daoId, props.walletAddress]);\r\n\r\n    const loadTransactionHistory = async (): Promise<void> => {\r\n        try {\r\n            console.log(`📜 Loading transaction history for ${props.daoName} - ${props.walletAddress}`);\r\n            setIsLoading(true);\r\n            setError(null);\r\n\r\n            const client = MatrixClientPeg.safeGet();\r\n            const daoSpace = client.getRoom(props.daoId);\r\n            if (!daoSpace) {\r\n                throw new Error(\"DAO space not found\");\r\n            }\r\n\r\n            // Find ledger room\r\n            const children = SpaceStore.instance.getChildren(props.daoId);\r\n            const ledgerRoom = children.find(child => {\r\n                const room = client.getRoom(child.roomId);\r\n                return room && room.name && room.name.toLowerCase().includes(\"ledger\");\r\n            });\r\n\r\n            if (!ledgerRoom) {\r\n                throw new Error(\"Ledger room not found\");\r\n            }\r\n\r\n            const room = client.getRoom(ledgerRoom.roomId);\r\n            if (!room) {\r\n                throw new Error(\"Ledger room not accessible\");\r\n            }\r\n\r\n            console.log(`📜 Found ledger room: ${room.name}`);\r\n\r\n            // Get transaction history\r\n            const userTransactions = await getTransactionHistory(room, props.walletAddress);\r\n            console.log(`📜 Found ${userTransactions.length} transactions for ${props.walletAddress}`);\r\n\r\n            setTransactions(userTransactions);\r\n        } catch (err) {\r\n            console.error(\"Failed to load transaction history:\", err);\r\n            setError(err instanceof Error ? err.message : \"Failed to load transaction history\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const getTransactionHistory = async (room: Room, walletAddress: string): Promise<Transaction[]> => {\r\n        const transactions: Transaction[] = [];\r\n        const timeline = room.getLiveTimeline();\r\n        const events = timeline.getEvents();\r\n\r\n        // Also try to paginate backwards to get more history\r\n        const client = MatrixClientPeg.safeGet();\r\n        try {\r\n            await client.paginateEventTimeline(timeline, { backwards: true, limit: 100 });\r\n        } catch (err) {\r\n            console.warn(\"Failed to paginate timeline:\", err);\r\n        }\r\n\r\n        const allEvents = timeline.getEvents();\r\n        console.log(`📜 Processing ${allEvents.length} events from ledger`);\r\n\r\n        for (const event of allEvents) {\r\n            if (event.getType() !== \"m.room.message\") continue;\r\n\r\n            const content = event.getContent();\r\n            if (!content.transaction_data) continue;\r\n\r\n            const txData = content.transaction_data;\r\n            \r\n            // Check if this transaction involves the user's wallet\r\n            const isInvolved = txData.from === walletAddress || txData.to === walletAddress;\r\n            if (!isInvolved) continue;\r\n\r\n            const transaction: Transaction = {\r\n                type: txData.type || \"unknown\",\r\n                from: txData.from || \"\",\r\n                to: txData.to || \"\",\r\n                amount: Number(txData.amount) || 0,\r\n                balance: txData.balance,\r\n                senderBalance: txData.senderBalance,\r\n                recipientBalance: txData.recipientBalance,\r\n                timestamp: txData.timestamp ? new Date(txData.timestamp).getTime() : event.getTs(),\r\n                verifier: txData.verifier || \"\",\r\n                verifierUserId: txData.verifierUserId || \"\",\r\n                txHash: txData.txHash || \"\",\r\n                signature: txData.signature,\r\n                eventId: event.getId() || \"\",\r\n            };\r\n\r\n            transactions.push(transaction);\r\n        }\r\n\r\n        // Sort by timestamp (newest first)\r\n        return transactions.sort((a, b) => b.timestamp - a.timestamp);\r\n    };\r\n\r\n    const formatDate = (timestamp: number): string => {\r\n        return new Date(timestamp).toLocaleString();\r\n    };\r\n\r\n    const formatAddress = (address: string): string => {\r\n        if (address.length <= 12) return address;\r\n        return `${address.substring(0, 6)}...${address.substring(address.length - 6)}`;\r\n    };\r\n\r\n    const getTransactionType = (tx: Transaction): { label: string; color: string } => {\r\n        if (tx.type === \"PoC:issue\") {\r\n            return { label: \"Issue\", color: \"#4caf50\" };\r\n        } else if (tx.type === \"PoC:transfer\") {\r\n            if (tx.from === props.walletAddress) {\r\n                return { label: \"Sent\", color: \"#f44336\" };\r\n            } else {\r\n                return { label: \"Received\", color: \"#2196f3\" };\r\n            }\r\n        }\r\n        return { label: tx.type, color: \"#9e9e9e\" };\r\n    };\r\n\r\n    const getBalanceForUser = (tx: Transaction): number => {\r\n        if (tx.from === props.walletAddress) {\r\n            return tx.senderBalance ?? tx.balance ?? 0;\r\n        } else {\r\n            return tx.recipientBalance ?? tx.balance ?? 0;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <BaseDialog\r\n            className=\"mx_TransactionHistoryDialog\"\r\n            hasCancel={true}\r\n            onFinished={props.onFinished}\r\n            title={`Transaction History - ${props.daoName} DAO`}\r\n        >\r\n            <div className=\"mx_TransactionHistoryDialog_content\">\r\n                {isLoading && (\r\n                    <div className=\"mx_TransactionHistoryDialog_loading\">\r\n                        <Spinner />\r\n                        <p>Loading transaction history...</p>\r\n                    </div>\r\n                )}\r\n\r\n                {error && (\r\n                    <div className=\"mx_TransactionHistoryDialog_error\">\r\n                        <p>{error}</p>\r\n                    </div>\r\n                )}\r\n\r\n                {!isLoading && !error && (\r\n                    <div className=\"mx_TransactionHistoryDialog_transactions\">\r\n                        {transactions.length === 0 ? (\r\n                            <div className=\"mx_TransactionHistoryDialog_empty\">\r\n                                <p>No transactions found for this wallet.</p>\r\n                            </div>\r\n                        ) : (\r\n                            <div className=\"mx_TransactionHistoryDialog_list\">\r\n                                {transactions.map((tx, index) => {\r\n                                    const txType = getTransactionType(tx);\r\n                                    const userBalance = getBalanceForUser(tx);\r\n                                    \r\n                                    return (\r\n                                        <div \r\n                                            key={tx.eventId || index} \r\n                                            className=\"mx_TransactionHistoryDialog_row\"\r\n                                            style={{ marginBottom: index < transactions.length - 1 ? '16px' : '0' }}\r\n                                        >\r\n                                            <div className=\"mx_TransactionHistoryDialog_cell\">\r\n                                                <strong>Type:</strong> \r\n                                                <span \r\n                                                    className=\"mx_TransactionHistoryDialog_type\"\r\n                                                    style={{ color: txType.color, marginLeft: '8px' }}\r\n                                                >\r\n                                                    {txType.label}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div className=\"mx_TransactionHistoryDialog_cell\">\r\n                                                <strong>From/To:</strong>\r\n                                                <span style={{ marginLeft: '8px' }}>\r\n                                                    {tx.type === \"PoC:issue\" ? (\r\n                                                        \"System Issue\"\r\n                                                    ) : tx.from === props.walletAddress ? (\r\n                                                        `→ ${formatAddress(tx.to)}`\r\n                                                    ) : (\r\n                                                        `← ${formatAddress(tx.from)}`\r\n                                                    )}\r\n                                                </span>\r\n                                            </div>\r\n                                            <div className=\"mx_TransactionHistoryDialog_cell\">\r\n                                                <strong>Amount:</strong>\r\n                                                <span style={{ marginLeft: '8px' }}>{tx.amount}B</span>\r\n                                            </div>\r\n                                            <div className=\"mx_TransactionHistoryDialog_cell\">\r\n                                                <strong>Balance:</strong>\r\n                                                <span style={{ marginLeft: '8px' }}>{userBalance}B</span>\r\n                                            </div>\r\n                                            <div className=\"mx_TransactionHistoryDialog_cell\">\r\n                                                <strong>Date:</strong>\r\n                                                <span style={{ marginLeft: '8px' }}>{formatDate(tx.timestamp)}</span>\r\n                                            </div>\r\n                                            <div className=\"mx_TransactionHistoryDialog_cell\">\r\n                                                <strong>TX Hash:</strong>\r\n                                                <span style={{ marginLeft: '8px' }}>{formatAddress(tx.txHash)}</span>\r\n                                            </div>\r\n                                        </div>\r\n                                    );\r\n                                })}\r\n                            </div>\r\n                        )}\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </BaseDialog>\r\n    );\r\n}\r\n"],"names":["TransactionHistoryDialog","props","transactions","setTransactions","useState","isLoading","setIsLoading","error","setError","useEffect","loadTransactionHistory","daoId","walletAddress","async","console","log","daoName","client","MatrixClientPeg","safeGet","getRoom","Error","ledgerRoom","SpaceStore","instance","getChildren","find","child","room","roomId","name","toLowerCase","includes","userTransactions","getTransactionHistory","length","err","message","timeline","getLiveTimeline","getEvents","paginateEventTimeline","backwards","limit","warn","allEvents","event","getType","content","getContent","transaction_data","txData","from","to","transaction","type","amount","Number","balance","senderBalance","recipientBalance","timestamp","Date","getTime","getTs","verifier","verifierUserId","txHash","signature","eventId","getId","push","sort","a","b","formatAddress","address","substring","React","BaseDialog","className","hasCancel","onFinished","title","Spinner","map","tx","index","txType","label","color","getTransactionType","userBalance","_ref","_tx$senderBalance","_ref2","_tx$recipientBalance","getBalanceForUser","key","style","marginBottom","marginLeft","toLocaleString"],"sourceRoot":""}