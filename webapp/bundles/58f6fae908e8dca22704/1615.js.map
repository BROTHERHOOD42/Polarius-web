{"version":3,"file":"bundles/58f6fae908e8dca22704/1615.js","mappings":"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","sources":["webpack://element-web/./src/components/views/wallet/MyWalletPanel.tsx","webpack://element-web/./src/components/views/dialogs/DAOWalletDialog.tsx"],"sourcesContent":["/*\r\nCopyright 2024 New Vector Ltd.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { type Room } from \"matrix-js-sdk/src/matrix\";\r\n\r\nimport { _t } from \"../../../languageHandler\";\r\nimport AccessibleButton from \"../elements/AccessibleButton\";\r\nimport Field from \"../elements/Field\";\r\nimport Spinner from \"../elements/Spinner\";\r\nimport { DAOMnemonicWallet, type DAOWalletSummary } from \"../../../utils/DAOMnemonicWallet\";\r\nimport { DAOContributionTracker } from \"../../../utils/DAOContributionTracker\";\r\nimport Modal from \"../../../Modal\";\r\nimport InfoDialog from \"../dialogs/InfoDialog\";\r\nimport { MatrixClientPeg } from \"../../../MatrixClientPeg\";\r\nimport SpaceStore from \"../../../stores/spaces/SpaceStore\";\r\nimport defaultDispatcher from \"../../../dispatcher/dispatcher\";\r\nimport { Action } from \"../../../dispatcher/actions\";\r\n\r\ninterface Props {\r\n    onClose?: () => void;\r\n}\r\n\r\nconst MyWalletPanel: React.FC<Props> = ({ onClose }) => {\r\n    const [hasWallet, setHasWallet] = useState(false);\r\n    const [walletData, setWalletData] = useState<any>(null);\r\n    const [walletSummaries, setWalletSummaries] = useState<DAOWalletSummary[]>([]);\r\n    const [mnemonic, setMnemonic] = useState(\"\");\r\n    const [showMnemonicInput, setShowMnemonicInput] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [allSpaces, setAllSpaces] = useState<Room[]>([]);\r\n\r\n    const wallet = DAOMnemonicWallet.getInstance();\r\n\r\n    const handleWalletUpdate = useCallback(async (newWalletSummaries: DAOWalletSummary[]) => {\r\n        setHasWallet(newWalletSummaries.length > 0);\r\n        \r\n        // Ï≤´ Î≤àÏß∏ ÏßÄÍ∞ëÏùò Ï†ïÎ≥¥Î•º Î©îÏù∏ ÏßÄÍ∞ëÏúºÎ°ú ÏÇ¨Ïö© (Î™®Îì† ÏßÄÍ∞ëÏù¥ ÎèôÏùºÌïòÎØÄÎ°ú)\r\n        if (newWalletSummaries.length > 0) {\r\n            const firstWalletId = newWalletSummaries[0].daoId;\r\n            const mainWallet = wallet.getDAOWallet(firstWalletId);\r\n            setWalletData(mainWallet);\r\n            \r\n            // Î™®Îì† ÌîÑÎ°úÌÜ†ÏΩú DAO ÏûîÏï° Ï°∞Ìöå\r\n            try {\r\n                console.log(\"üîÑ MyWalletPanel: Updating wallet summaries...\");\r\n                const allBalances = await wallet.getAllProtocolDAOBalances();\r\n                console.log(\"üìä MyWalletPanel: Received balances:\", allBalances);\r\n                setWalletSummaries(allBalances);\r\n            } catch (error) {\r\n                console.error(\"‚ùå MyWalletPanel: Failed to get all protocol DAO balances:\", error);\r\n                setWalletSummaries(newWalletSummaries);\r\n            }\r\n        } else {\r\n            setWalletData(null);\r\n            setWalletSummaries([]);\r\n        }\r\n    }, [wallet]);\r\n\r\n    useEffect(() => {\r\n        const initializeWallet = async () => {\r\n            const existingWallets = wallet.getAllDAOWallets();\r\n            setHasWallet(existingWallets.length > 0);\r\n\r\n            // Ï≤´ Î≤àÏß∏ ÏßÄÍ∞ëÏùò Ï†ïÎ≥¥Î•º Î©îÏù∏ ÏßÄÍ∞ëÏúºÎ°ú ÏÇ¨Ïö©\r\n            if (existingWallets.length > 0) {\r\n                const firstWalletId = existingWallets[0].daoId;\r\n                const mainWallet = wallet.getDAOWallet(firstWalletId);\r\n                setWalletData(mainWallet);\r\n                \r\n                // Î™®Îì† ÌîÑÎ°úÌÜ†ÏΩú DAO ÏûîÏï° Ï°∞Ìöå\r\n                try {\r\n                    console.log(\"üèÅ MyWalletPanel: Initial load - getting all protocol DAO balances...\");\r\n                    const allBalances = await wallet.getAllProtocolDAOBalances();\r\n                    console.log(\"üìä MyWalletPanel: Initial load - received balances:\", allBalances);\r\n                    setWalletSummaries(allBalances);\r\n                } catch (error) {\r\n                    console.error(\"‚ùå MyWalletPanel: Initial load - failed to get all protocol DAO balances:\", error);\r\n                    setWalletSummaries(existingWallets);\r\n                }\r\n            } else {\r\n                setWalletSummaries([]);\r\n            }\r\n\r\n            // Get all DAO spaces\r\n            const client = MatrixClientPeg.safeGet();\r\n            const spaces = SpaceStore.instance.spacePanelSpaces.filter(space => \r\n                space.name && space.roomId.startsWith('!')\r\n            );\r\n            setAllSpaces(spaces);\r\n        };\r\n\r\n        initializeWallet();\r\n\r\n        wallet.addListener(handleWalletUpdate);\r\n        return () => wallet.removeListener(handleWalletUpdate);\r\n    }, [wallet, handleWalletUpdate]);\r\n\r\n    const handleCreateNewWallet = useCallback(async () => {\r\n        if (allSpaces.length === 0) {\r\n            setError(\"DAO Ïä§ÌéòÏù¥Ïä§Í∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä DAO Ïä§ÌéòÏù¥Ïä§Ïóê Í∞ÄÏûÖÌïòÏÑ∏Ïöî.\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // Create wallet for all available DAO spaces\r\n            const firstSpace = allSpaces[0];\r\n            const newWallet = await wallet.createDAOWallet(firstSpace.roomId, firstSpace.name);\r\n            \r\n            // Copy the same wallet to all other DAO spaces\r\n            for (let i = 1; i < allSpaces.length; i++) {\r\n                const space = allSpaces[i];\r\n                await wallet.createDAOWalletFromMnemonic(\r\n                    space.roomId,\r\n                    space.name,\r\n                    \"B\",\r\n                    1,\r\n                    newWallet.mnemonic\r\n                );\r\n            }\r\n\r\n            Modal.createDialog(InfoDialog, {\r\n                title: \"Wallet Created Successfully\",\r\n                description: (\r\n                    <div>\r\n                        <p><strong>MyWallet has been created!</strong></p>\r\n                        <p>You can use the same wallet across all DAOs.</p>\r\n                        <p>Wallet Address: <code>{newWallet.address}</code></p>\r\n                        <p><em>Please keep your mnemonic phrase in a safe place.</em></p>\r\n                        <div style={{ \r\n                            backgroundColor: \"#f5f5f5\", \r\n                            padding: \"15px\", \r\n                            borderRadius: \"4px\", \r\n                            fontFamily: \"monospace\",\r\n                            wordBreak: \"break-all\",\r\n                            margin: \"10px 0\",\r\n                            fontSize: \"12px\",\r\n                            lineHeight: \"1.4\"\r\n                        }}>\r\n                            <div><strong>Mnemonic:</strong> {newWallet.mnemonic}</div>\r\n                        </div>\r\n                    </div>\r\n                ),\r\n                button: \"OK\"\r\n            });\r\n\r\n            DAOContributionTracker.getInstance().initialize();\r\n            \r\n            // Î™®Îì† ÌîÑÎ°úÌÜ†ÏΩú DAO ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏\r\n            try {\r\n                const allBalances = await wallet.getAllProtocolDAOBalances();\r\n                setWalletSummaries(allBalances);\r\n            } catch (error) {\r\n                console.error(\"Failed to update all protocol DAO balances:\", error);\r\n            }\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : \"ÏßÄÍ∞ë ÏÉùÏÑ± Ïã§Ìå®\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [wallet, allSpaces]);\r\n\r\n    const handleRestoreWallet = useCallback(async () => {\r\n        if (!mnemonic.trim()) {\r\n            setError(\"ÎãàÎ™®Îãâ Î¨∏Íµ¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî\");\r\n            return;\r\n        }\r\n\r\n        if (allSpaces.length === 0) {\r\n            setError(\"DAO Ïä§ÌéòÏù¥Ïä§Í∞Ä ÏóÜÏäµÎãàÎã§. Î®ºÏ†Ä DAO Ïä§ÌéòÏù¥Ïä§Ïóê Í∞ÄÏûÖÌïòÏÑ∏Ïöî.\");\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            if (!wallet.validateMnemonicPhrase(mnemonic.trim())) {\r\n                throw new Error(\"Ïú†Ìö®ÌïòÏßÄ ÏïäÏùÄ ÎãàÎ™®Îãâ Î¨∏Íµ¨ÏûÖÎãàÎã§\");\r\n            }\r\n\r\n            // Restore wallet for all available DAO spaces\r\n            for (const space of allSpaces) {\r\n                await wallet.createDAOWalletFromMnemonic(\r\n                    space.roomId,\r\n                    space.name,\r\n                    \"B\",\r\n                    1,\r\n                    mnemonic.trim()\r\n                );\r\n            }\r\n\r\n            Modal.createDialog(InfoDialog, {\r\n                title: \"ÏßÄÍ∞ë Î≥µÍµ¨ ÏôÑÎ£å\",\r\n                description: (\r\n                    <div>\r\n                        <p><strong>ÎßàÏù¥ÏõîÎ†õÏù¥ Î≥µÍµ¨ÎêòÏóàÏäµÎãàÎã§!</strong></p>\r\n                        <p>Î™®Îì† DAOÏóêÏÑú ÎèôÏùºÌïú ÏßÄÍ∞ëÏùÑ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÏäµÎãàÎã§.</p>\r\n                        <p><em>ÏõêÏû•ÏóêÏÑú Í∏∞Ï°¥ Í±∞Îûò Í∏∞Î°ùÏùÑ Î∞îÌÉïÏúºÎ°ú ÏûîÏï°ÏùÑ Î≥µÍµ¨ÌñàÏäµÎãàÎã§.</em></p>\r\n                    </div>\r\n                ),\r\n                button: \"ÌôïÏù∏\"\r\n            });\r\n\r\n            DAOContributionTracker.getInstance().initialize();\r\n            \r\n            // Î™®Îì† ÌîÑÎ°úÌÜ†ÏΩú DAO ÏûîÏï° ÏóÖÎç∞Ïù¥Ìä∏\r\n            try {\r\n                const allBalances = await wallet.getAllProtocolDAOBalances();\r\n                setWalletSummaries(allBalances);\r\n            } catch (error) {\r\n                console.error(\"Failed to update all protocol DAO balances:\", error);\r\n            }\r\n            \r\n            setShowMnemonicInput(false);\r\n            setMnemonic(\"\");\r\n        } catch (err) {\r\n            setError(err instanceof Error ? err.message : \"ÏßÄÍ∞ë Î≥µÏõê Ïã§Ìå®\");\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    }, [wallet, mnemonic, allSpaces]);\r\n\r\n    const handleExportWallet = useCallback(() => {\r\n        try {\r\n            if (!walletData) {\r\n                throw new Error(\"ÏßÄÍ∞ë Ï†ïÎ≥¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§\");\r\n            }\r\n\r\n            const exportData = `My Wallet Backup\\nAddress: ${walletData.address}\\nMnemonic: ${walletData.mnemonic}\\n\\n`;\r\n            \r\n            const blob = new Blob([exportData], { type: \"text/plain; charset=utf-8\" });\r\n            const url = URL.createObjectURL(blob);\r\n            const a = document.createElement(\"a\");\r\n            a.href = url;\r\n            a.download = `my-wallet-backup-${new Date().toISOString().split('T')[0]}.txt`;\r\n            a.click();\r\n            URL.revokeObjectURL(url);\r\n        } catch (err) {\r\n            console.error(\"Failed to export wallet:\", err);\r\n        }\r\n    }, [walletData]);\r\n\r\n    const handleDeleteAllWallets = useCallback(() => {\r\n        if (!walletData) return;\r\n\r\n        const confirmed = confirm(\r\n            `Are you sure you want to delete your wallet?\\n\\nAll DAO wallets will be deleted and can only be recovered with your mnemonic phrase.`\r\n        );\r\n\r\n        if (confirmed) {\r\n            try {\r\n                // Î™®Îì† DAOÏùò ÏßÄÍ∞ë ÏÇ≠Ï†ú\r\n                const allWallets = wallet.getAllDAOWallets();\r\n                allWallets.forEach(walletSummary => {\r\n                    wallet.deleteDAOWallet(walletSummary.daoId);\r\n                });\r\n\r\n                setWalletData(null);\r\n                setWalletSummaries([]);\r\n                setHasWallet(false);\r\n                \r\n                Modal.createDialog(InfoDialog, {\r\n                    title: \"Wallet Deleted Successfully\",\r\n                    description: \"All DAO wallets have been deleted. You can recover them anytime with your mnemonic phrase.\",\r\n                    button: \"ÌôïÏù∏\"\r\n                });\r\n            } catch (err) {\r\n                console.error(\"Failed to delete wallets:\", err);\r\n            }\r\n        }\r\n    }, [walletData, wallet]);\r\n\r\n    const handleShowQRCode = useCallback(async () => {\r\n        if (!walletData) return;\r\n\r\n        const QRCodeDialog = await import(\"../dialogs/QRCodeDialog\");\r\n        Modal.createDialog(QRCodeDialog.default, {\r\n            address: walletData.address,\r\n            daoName: \"My Wallet\",\r\n            space: null,\r\n        });\r\n    }, [walletData]);\r\n\r\n    const formatCurrency = (amount: number): string => {\r\n        return new Intl.NumberFormat().format(amount);\r\n    };\r\n\r\n    const handleNavigateToDAO = useCallback((daoId: string, daoName: string) => {\r\n        console.log(`üîó Navigating to DAO: ${daoName} (${daoId})`);\r\n        defaultDispatcher.dispatch({\r\n            action: Action.ViewRoom,\r\n            room_id: daoId,\r\n            metricsTrigger: \"MyWallet\",\r\n        });\r\n        \r\n        // ÎßàÏù¥ÏõîÎ†õ Ï∞Ω Îã´Í∏∞\r\n        if (onClose) {\r\n            onClose();\r\n        }\r\n    }, [onClose]);\r\n\r\n    const getDAODisplayId = useCallback((daoId: string, daoName: string) => {\r\n        try {\r\n            const client = MatrixClientPeg.safeGet();\r\n            const room = client.getRoom(daoId);\r\n            if (room) {\r\n                return room.getCanonicalAlias() || `#${daoName?.toLowerCase().replace(/\\s+/g, '-')}:${client.getDomain()}`;\r\n            }\r\n            return `#${daoName?.toLowerCase().replace(/\\s+/g, '-')}:localhost`;\r\n        } catch (error) {\r\n            return `#${daoName?.toLowerCase().replace(/\\s+/g, '-')}:localhost`;\r\n        }\r\n    }, []);\r\n\r\n\r\n    const renderWalletInfo = () => {\r\n        if (!walletData) return null;\r\n\r\n        return (\r\n            <div className=\"mx_MyWalletPanel_walletInfo\">\r\n                <div className=\"mx_MyWalletPanel_address\">\r\n                    <span className=\"mx_MyWalletPanel_label\">Address</span>\r\n                    <div className=\"mx_MyWalletPanel_addressRow\">\r\n                        <div className=\"mx_MyWalletPanel_addressValue\">\r\n                            {walletData.address}\r\n                        </div>\r\n                        <a\r\n                            href=\"#\"\r\n                            className=\"mx_MyWalletPanel_copyLink\"\r\n                            onClick={(e) => {\r\n                                e.preventDefault();\r\n                                navigator.clipboard.writeText(walletData.address);\r\n                                const element = e.currentTarget as HTMLElement;\r\n                                const originalText = element.textContent;\r\n                                element.textContent = \"Î≥µÏÇ¨Îê®!\";\r\n                                setTimeout(() => {\r\n                                    element.textContent = originalText;\r\n                                }, 1000);\r\n                            }}\r\n                        >\r\n                            Copy\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n                \r\n                <div className=\"mx_MyWalletPanel_actions\">\r\n                    <a\r\n                        href=\"#\"\r\n                        className=\"mx_MyWalletPanel_actionLink\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            handleExportWallet();\r\n                        }}\r\n                    >\r\n                        Backup\r\n                    </a>\r\n                    <span style={{ margin: \"0 12px\" }}></span>\r\n                    <a\r\n                        href=\"#\"\r\n                        className=\"mx_MyWalletPanel_actionLink mx_MyWalletPanel_deleteLink\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            handleDeleteAllWallets();\r\n                        }}\r\n                    >\r\n                        Delete\r\n                    </a>\r\n                    <span style={{ margin: \"0 12px\" }}></span>\r\n                    <a\r\n                        href=\"#\"\r\n                        className=\"mx_MyWalletPanel_actionLink\"\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            handleShowQRCode();\r\n                        }}\r\n                    >\r\n                        QR\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const renderBalanceCards = () => {\r\n        console.log(\"üé® Rendering balance cards. WalletSummaries:\", walletSummaries);\r\n        if (walletSummaries.length === 0) {\r\n            console.log(\"üé® No wallet summaries to render\");\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"mx_MyWalletPanel_balanceList\">\r\n                <h4>DAO Balance</h4>\r\n                {walletSummaries.map((summary) => {\r\n                    console.log(`üé® Rendering card for ${summary.daoName}: ${summary.balance}${summary.currency}`);\r\n                    return (\r\n                        <div key={summary.daoId} className=\"mx_MyWalletPanel_balanceCard\">\r\n                            <div className=\"mx_MyWalletPanel_balanceHeader\">\r\n                                <div className=\"mx_MyWalletPanel_daoInfo\">\r\n                                    <div className=\"mx_MyWalletPanel_daoMainInfo\">\r\n                                        <a\r\n                                            href=\"#\"\r\n                                            className=\"mx_MyWalletPanel_daoNameLink\"\r\n                                            onClick={(e) => {\r\n                                                e.preventDefault();\r\n                                                handleNavigateToDAO(summary.daoId, summary.daoName);\r\n                                            }}\r\n                                        >\r\n                                            {summary.daoName} Network\r\n                                        </a>\r\n                                        <span style={{ margin: \"0 8px\" }}></span>\r\n                                        <span \r\n                                            className=\"mx_MyWalletPanel_daoId\"\r\n                                            style={{ fontSize: \"10px\" }}\r\n                                        >\r\n                                            {getDAODisplayId(summary.daoId, summary.daoName)}\r\n                                        </span>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"mx_MyWalletPanel_balanceAmount\">\r\n                                    {formatCurrency(summary.balance)} {summary.currency}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const renderContent = () => {\r\n        if (hasWallet) {\r\n            return (\r\n                <>\r\n                    {renderWalletInfo()}\r\n                    {renderBalanceCards()}\r\n                </>\r\n            );\r\n        }\r\n\r\n        return (\r\n            <div className=\"mx_MyWalletPanel_card\">\r\n                <h3>My Wallet</h3>\r\n                <p>Create a new wallet or restore an existing one</p>\r\n                \r\n                {error && (\r\n                    <div className=\"mx_MyWalletPanel_error\">\r\n                        {error}\r\n                    </div>\r\n                )}\r\n\r\n                {!showMnemonicInput ? (\r\n                    <>\r\n                        <AccessibleButton\r\n                            kind=\"primary\"\r\n                            onClick={handleCreateNewWallet}\r\n                            disabled={isLoading}\r\n                            className=\"mx_MyWalletPanel_createButton\"\r\n                        >\r\n                            {isLoading ? <Spinner w={16} h={16} /> : \"Create New Wallet\"}\r\n                        </AccessibleButton>\r\n\r\n                        <AccessibleButton\r\n                            kind=\"link\"\r\n                            onClick={() => setShowMnemonicInput(true)}\r\n                            disabled={isLoading}\r\n                            className=\"mx_MyWalletPanel_restoreButton\"\r\n                        >\r\n                            Restore Existing Wallet\r\n                        </AccessibleButton>\r\n                    </>\r\n                ) : (\r\n                    <div className=\"mx_MyWalletPanel_restoreForm\">\r\n                        <Field\r\n                            label=\"Mnemonic Phrase (12 words)\"\r\n                            placeholder=\"word1 word2 word3 ...\"\r\n                            value={mnemonic}\r\n                            onChange={(e) => setMnemonic(e.target.value)}\r\n                            type=\"text\"\r\n                        />\r\n                        \r\n                        <div className=\"mx_MyWalletPanel_restoreActions\">\r\n                            <AccessibleButton\r\n                                kind=\"primary\"\r\n                                onClick={handleRestoreWallet}\r\n                                disabled={isLoading || !mnemonic.trim()}\r\n                            >\r\n                                {isLoading ? <Spinner w={16} h={16} /> : \"Restore\"}\r\n                            </AccessibleButton>\r\n                            \r\n                            <AccessibleButton\r\n                                kind=\"secondary\"\r\n                                onClick={() => {\r\n                                    setShowMnemonicInput(false);\r\n                                    setMnemonic(\"\");\r\n                                    setError(null);\r\n                                }}\r\n                                disabled={isLoading}\r\n                            >\r\n                                Cancel\r\n                            </AccessibleButton>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        );\r\n    };\r\n\r\n    return (\r\n        <div className=\"mx_MyWalletPanel\">\r\n            {renderContent()}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MyWalletPanel;\r\n","/*\r\nCopyright 2024 New Vector Ltd.\r\n\r\nSPDX-License-Identifier: AGPL-3.0-only OR GPL-3.0-only OR LicenseRef-Element-Commercial\r\nPlease see LICENSE files in the repository root for full details.\r\n*/\r\n\r\nimport React, { type JSX } from \"react\";\r\n\r\nimport BaseDialog from \"./BaseDialog\";\r\nimport MyWalletPanel from \"../wallet/MyWalletPanel\";\r\n\r\ninterface IProps {\r\n    onFinished(): void;\r\n}\r\n\r\nexport default function DAOWalletDialog(props: IProps): JSX.Element {\r\n    return (\r\n        <BaseDialog\r\n            className=\"mx_DAOWalletDialog\"\r\n            hasCancel={true}\r\n            onFinished={props.onFinished}\r\n            title=\"My Wallet\"\r\n            titleClass=\"mx_DAOWalletDialog_title\"\r\n        >\r\n            <div className=\"mx_DAOWalletDialog_content\">\r\n                <MyWalletPanel onClose={props.onFinished} />\r\n            </div>\r\n        </BaseDialog>\r\n    );\r\n}\r\n"],"names":["MyWalletPanel","onClose","hasWallet","setHasWallet","useState","walletData","setWalletData","walletSummaries","setWalletSummaries","mnemonic","setMnemonic","showMnemonicInput","setShowMnemonicInput","isLoading","setIsLoading","error","setError","allSpaces","setAllSpaces","wallet","DAOMnemonicWallet","getInstance","handleWalletUpdate","useCallback","async","newWalletSummaries","length","firstWalletId","daoId","mainWallet","getDAOWallet","console","log","allBalances","getAllProtocolDAOBalances","useEffect","existingWallets","getAllDAOWallets","MatrixClientPeg","safeGet","spaces","SpaceStore","instance","spacePanelSpaces","filter","space","name","roomId","startsWith","initializeWallet","addListener","removeListener","handleCreateNewWallet","firstSpace","newWallet","createDAOWallet","i","createDAOWalletFromMnemonic","Modal","createDialog","InfoDialog","title","description","React","address","style","backgroundColor","padding","borderRadius","fontFamily","wordBreak","margin","fontSize","lineHeight","button","DAOContributionTracker","initialize","err","Error","message","handleRestoreWallet","trim","validateMnemonicPhrase","handleExportWallet","exportData","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","Date","toISOString","split","click","revokeObjectURL","handleDeleteAllWallets","confirm","forEach","walletSummary","deleteDAOWallet","handleShowQRCode","QRCodeDialog","default","daoName","handleNavigateToDAO","defaultDispatcher","dispatch","action","Action","ViewRoom","room_id","metricsTrigger","getDAODisplayId","client","room","getRoom","getCanonicalAlias","toLowerCase","replace","getDomain","renderBalanceCards","className","map","summary","balance","currency","key","onClick","e","preventDefault","amount","Intl","NumberFormat","format","navigator","clipboard","writeText","element","currentTarget","originalText","textContent","setTimeout","Field","label","placeholder","value","onChange","target","AccessibleButton","kind","disabled","Spinner","w","h","DAOWalletDialog","props","BaseDialog","hasCancel","onFinished","titleClass"],"sourceRoot":""}